<?xml version="1.0" encoding="US-ASCII" standalone="yes"?>
<objectListWrapper>
    <objects>
        <objectContainer>
            <compositeWorkSetting>
                <category>
                    <automation>false</automation>
                    <description></description>
                    <enabled>true</enabled>
                    <executingType>HUMAN</executingType>
                    <name>Other</name>
                    <private>false</private>
                    <publicId>dd92f240-144b-4fef-8476-4ec0acbc1104</publicId>
                </category>
                <contentType>NORMAL</contentType>
                <description></description>
                <enabled>true</enabled>
                <name>Workfusion_OCR_v2.0</name>
                <publicId>cc5efb30-4e93-4300-b314-997914fe421d</publicId>
                <version>
                    <componentUuid>9bf52dce-05ef-4df6-a0e6-402bc15cc135</componentUuid>
                    <incrementalVersion>1.1</incrementalVersion>
                    <lastInChain>true</lastInChain>
                    <lastModified>2018-08-13T12:38:38Z</lastModified>
                    <versionUuid>bc547e5a-4c98-449a-bfbb-4aaf4664fafd</versionUuid>
                </version>
                <automationQualityThreshold>80</automationQualityThreshold>
                <campaign>
                    <active>true</active>
                    <businessRules/>
                    <campaignMaps>
                        <campaignMap>
                            <blockSize>1</blockSize>
                            <businessRule>
                                <content>#RuleContext.APPROVE_ALL_RULE</content>
                                <name>Approve All</name>
                                <ruleType>WORKFLOW_RULE</ruleType>
                                <ruleTypeUI>Composite</ruleTypeUI>
                                <uuid>ddf31643-1e83-4773-8362-3999065c6fed</uuid>
                                <workflowRuleMode>SIMPLE</workflowRuleMode>
                            </businessRule>
                            <campaign>
                                <active>false</active>
                                <businessRules/>
                                <campaignMaps/>
                                <campaigns/>
                                <executingType>MACHINE</executingType>
                                <goldBucketBlockSize>0</goldBucketBlockSize>
                                <goldRatio>0</goldRatio>
                                <goldSource>Empty</goldSource>
                                <goldType>Percentage</goldType>
                                <machineConfig>
                                    <answers/>
                                    <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;!--
Step to configure OCR parameters

@Author: Alexey Shalak
@Version: 1.0
Workfusion 2018, RPA Express 2.0
--&gt;

&lt;config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config"
	scriptlang="groovy"&gt;
  
  	&lt;required name="s3_bucket_name"/&gt;
  	&lt;required name="ocr_type"/&gt;
  	&lt;required name="cache_datastore"/&gt;
  
  	&lt;script&gt;&lt;![CDATA[
		if(ocr_type.toString().equals("tood")) {
			export_format = "xmlForCorrectedImage";
		} else if (ocr_type.toString().equals("standard")) {
  			if( !sys.isVariableDefined("export_format") || export_format == null || export_format.toString().isEmpty()) {
				export_format = "xmlForCorrectedImage";
			} else {
				export_format = export_format.toString().replace("|", ",");
			}
		}
		sys.defineVariable("exportFormat", export_format);

		if( !sys.isVariableDefined("document_language") || document_language == null || document_language.toString().isEmpty()) {
			document_language = "English";
		} else {
			document_language = document_language.toString().replace(" ", "");
		}
		sys.defineVariable("documentLanguage", document_language);

		if( !sys.isVariableDefined("skip_ocr_cache") || skip_ocr_cache == null || skip_ocr_cache.toString().isEmpty()) {
			skip_ocr_cache = "false";
		} else {
			skip_ocr_cache = skip_ocr_cache.toString().replace(" ", "");
		}
		sys.defineVariable("skip_ocr_cache", skip_ocr_cache);

		if( !sys.isVariableDefined("is_logging_enabled") || is_logging_enabled == null || is_logging_enabled.toString().isEmpty()) {
			is_logging_enabled = "true";
		} else {
			is_logging_enabled = is_logging_enabled.toString().replace(" ", "");
		}
		sys.defineVariable("is_logging_enabled", is_logging_enabled);

		if( !sys.isVariableDefined("ocr_xml_char_recognition") || ocr_xml_char_recognition == null || ocr_xml_char_recognition.toString().isEmpty()) {
			ocr_xml_char_recognition = "false";
		}
		sys.defineVariable("ocrXmlCharRecognition", ocr_xml_char_recognition);

		if( !sys.isVariableDefined("allowed_region_types") || allowed_region_types == null || allowed_region_types.toString().isEmpty()) {
			allowed_region_types = "BT_Table,BT_Text,BT_Separator,BT_SeparatorGroup,BT_Checkmark,BT_CheckmarkGroup,BT_AutoAnalysis";
		} else {
			allowed_region_types = allowed_region_types.toString().replace("|", ",");
		}
		sys.defineVariable("allowed_region_types", allowed_region_types)

		if( !sys.isVariableDefined("custom_regions") || custom_regions == null) {
			custom_regions = "";
		}
		sys.defineVariable("custom_regions", custom_regions);

		if( !sys.isVariableDefined("change_dpi") || change_dpi == null) {
			change_dpi = "";
		}	
 		sys.defineVariable("change_dpi", change_dpi);

		if( !sys.isVariableDefined("invert_image") || invert_image == null || invert_image.toString().isEmpty()) {
			invert_image = "false";
		}
		sys.defineVariable("invertImage", invert_image)

		if( !sys.isVariableDefined("discard_color_image") || discard_color_image == null || discard_color_image.toString().isEmpty()) {
			discard_color_image = "false";
		}
		sys.defineVariable("discardColorImage", discard_color_image);
		
		if( !sys.isVariableDefined("remove_color_objects") || remove_color_objects == null) {
			remove_color_objects = "";
		}	
 		sys.defineVariable("remove_color_objects", remove_color_objects);

		if( !sys.isVariableDefined("remove_color_objects_type") || remove_color_objects_type == null || remove_color_objects_type.toString().isEmpty()) {
			remove_color_objects_type = "Background";
		}
		sys.defineVariable("removeColorObjectsType", remove_color_objects_type);
	]]&gt;&lt;/script&gt;
  
	&lt;var-def name="document_uuid"&gt;
		&lt;script language="java" return="uuid"&gt;&lt;![CDATA[
			String uuid = UUID.randomUUID().toString();
		]]&gt;&lt;/script&gt;
	&lt;/var-def&gt;
  
  	&lt;var-def name="bp_run_id"&gt;
		&lt;template&gt;
			${item.getWrappedObject().getRun().getRootRunUuid()}
		&lt;/template&gt;
	&lt;/var-def&gt;
  
	&lt;export include-original-data="true"&gt;
      	&lt;single-column name="cache_datastore" value="${cache_datastore}"/&gt;
    	&lt;single-column name="export_format" value="${exportFormat}"/&gt;
        &lt;single-column name="document_language" value="${documentLanguage}"/&gt;
        &lt;single-column name="ocr_xml_char_recognition" value="${ocrXmlCharRecognition}"/&gt;
     	&lt;single-column name="skip_ocr_cache" value="${skip_ocr_cache}"/&gt;
      	&lt;single-column name="is_logging_enabled" value="${is_logging_enabled}"/&gt;
      	&lt;single-column name="allowed_region_types" value="${allowed_region_types}"/&gt;
      	&lt;single-column name="custom_regions" value="${custom_regions}"/&gt;
      	&lt;single-column name="change_dpi" value="${change_dpi}"/&gt;
        &lt;single-column name="invert_image" value="${invertImage}"/&gt;
        &lt;single-column name="discard_color_image" value="${discardColorImage}"/&gt;
      	&lt;single-column name="remove_color_objects" value="${remove_color_objects}"/&gt;
      	&lt;single-column name="remove_color_objects_type" value="${removeColorObjectsType}"/&gt;
      
      	&lt;single-column name="bp_run_id" value="${bp_run_id}"/&gt;
      	&lt;single-column name="document_uuid" value="${document_uuid}"/&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                    <description></description>
                                    <includedConfigs/>
                                    <inclusionCode>8deff6c0-b7ee-430d-a96a-1e76592fd4ef</inclusionCode>
                                    <jsonParams>{"configXMLModified":"true"}</jsonParams>
                                    <machineWorkSetting>
                                        <category>
                                            <automation>false</automation>
                                            <description></description>
                                            <enabled>true</enabled>
                                            <executingType>MACHINE</executingType>
                                            <name>Other</name>
                                            <private>false</private>
                                            <publicId>dd92f240-144b-4fef-8476-4ec0acbc1105</publicId>
                                        </category>
                                        <contentType>BLANK</contentType>
                                        <description></description>
                                        <enabled>true</enabled>
                                        <name>Miscellaneous Tasks</name>
                                        <publicId>26e6e095-00bb-43fa-8c34-af0b18e71ac9</publicId>
                                        <version>
                                            <componentUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2018-07-09T12:40:36Z</lastModified>
                                            <versionUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</versionUuid>
                                        </version>
                                        <answers/>
                                        <machineWorkSettingType>BASIC</machineWorkSettingType>
                                        <template>
                                            <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                            <name>Blank</name>
                                            <origination>CREATED_MANUALLY</origination>
                                            <status>ACTIVE</status>
                                            <type>BASE_MACHINE</type>
                                            <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                            <version>
                                                <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                                <incrementalVersion>1.0</incrementalVersion>
                                                <lastInChain>true</lastInChain>
                                                <lastModified>2012-12-27T00:00:00Z</lastModified>
                                                <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                            </version>
                                        </template>
                                    </machineWorkSetting>
                                    <machineWorkSettingType>BASIC</machineWorkSettingType>
                                    <name>Input data processing</name>
                                    <machineConfigOptions/>
                                    <sourceType>MANUAL</sourceType>
                                    <template>
                                        <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                        <name>Blank</name>
                                        <origination>CREATED_MANUALLY</origination>
                                        <status>ACTIVE</status>
                                        <type>BASE_MACHINE</type>
                                        <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                        <version>
                                            <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2012-12-27T00:00:00Z</lastModified>
                                            <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                        </version>
                                    </template>
                                    <uuid>8deff6c0-b7ee-430d-a96a-1e76592fd4ef</uuid>
                                    <version>
                                        <componentUuid>6c6e68e8-1ffb-42c6-bfe9-c80f599cd743</componentUuid>
                                        <incrementalVersion>1.7</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2018-08-13T11:41:07Z</lastModified>
                                        <versionUuid>89ef27ce-cac8-4546-a5bf-933ca8d42ae0</versionUuid>
                                    </version>
                                </machineConfig>
                                <moderation>false</moderation>
                                <origination>CREATED_AUTOMATICALLY</origination>
                                <requiresData>true</requiresData>
                                <status>ACTIVE</status>
                                <streamComplexRunThreshold>1</streamComplexRunThreshold>
                                <streamTimeInterval>Immediately</streamTimeInterval>
                                <streamTimeIntervalValue>0</streamTimeIntervalValue>
                                <streamValueType>Tasks</streamValueType>
                                <title>Input data processing</title>
                                <type>SINGLE</type>
                                <uuid>9049c4bb-9c00-4311-ad63-da424d10c7a2</uuid>
                                <validWorkflow>false</validWorkflow>
                                <version>
                                    <componentUuid>16050d15-967b-4f3c-9304-e4cccda3e1db</componentUuid>
                                    <incrementalVersion>1.10</incrementalVersion>
                                    <lastInChain>true</lastInChain>
                                    <lastModified>2018-08-13T11:41:07Z</lastModified>
                                    <versionUuid>84fb0632-e320-40af-83a8-4e13893434bb</versionUuid>
                                </version>
                                <workSettingBase>false</workSettingBase>
                            </campaign>
                            <deleted>false</deleted>
                            <stepIndex>1</stepIndex>
                            <stepPosition>START</stepPosition>
                            <streamed>false</streamed>
                            <uuid>dcca0818-4b7e-4332-a107-c2d73a867989</uuid>
                        </campaignMap>
                        <campaignMap>
                            <blockSize>1</blockSize>
                            <businessRule>
                                <content>#RuleContext.APPROVE_ALL_RULE</content>
                                <name>Approve All</name>
                                <ruleType>WORKFLOW_RULE</ruleType>
                                <ruleTypeUI>Composite</ruleTypeUI>
                                <uuid>3f15e389-c277-4a2a-a318-9c9e5d0f17e7</uuid>
                                <workflowRuleMode>SIMPLE</workflowRuleMode>
                            </businessRule>
                            <campaign>
                                <active>false</active>
                                <businessRules/>
                                <campaignMaps/>
                                <campaigns/>
                                <executingType>MACHINE</executingType>
                                <goldBucketBlockSize>0</goldBucketBlockSize>
                                <goldRatio>0</goldRatio>
                                <goldSource>Empty</goldSource>
                                <goldType>Percentage</goldType>
                                <machineConfig>
                                    <answers/>
                                    <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;!--
Step to make request to the OCR api, with our input parameters , but before, get one OCR taskId for all pages of document and make valid OCR api URL.

@Author: Alexey Shalak
@Version: 1.1
Workfusion 2018, RPA Express 2.0
--&gt;

&lt;config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config"
        scriptlang="java"&gt;

    &lt;!-- reading pNG from S3 --&gt;
    &lt;script&gt;&lt;![CDATA[
		import org.json.XML;
		import java.util.List;
		import java.util.ArrayList;
		import org.json.JSONObject;
		import org.json.JSONArray;
		import com.freedomoss.workfusion.utils.gson.GsonUtils;

		static String getJSONValue(String jsonString, String key) {
			try{
				JSONObject json = new JSONObject(jsonString);
				return json.get(key).get("directUrl").toString();
			} catch (Exception e){
				return "";
			}
		}
	]]&gt;&lt;/script&gt;

    &lt;var-def name="jsonSize"&gt;
        &lt;var name="pages" /&gt;
    &lt;/var-def&gt;

    &lt;while condition="true" maxloops="${jsonSize.toInt()}" index="i"&gt;
        &lt;var-def name="jsonKey"&gt;
            &lt;template&gt;fileList-${i.toInt()}&lt;/template&gt;
        &lt;/var-def&gt;
        &lt;!-- reading pNG from S3 --&gt;
        &lt;var-def name="jsonValue-${i}"&gt;
            &lt;script return="getJSONValue(json_file_urls.toString(), jsonKey.toString())" /&gt;
        &lt;/var-def&gt;
    &lt;/while&gt;

    &lt;var-def name="pagesList"&gt;
        &lt;while condition="true" maxloops="${jsonSize.toInt()}" index="i"&gt;
            &lt;var name="jsonValue-${i}" /&gt;
        &lt;/while&gt;
    &lt;/var-def&gt;

    &lt;var-def name="ocr_url"&gt;
        &lt;var-global name="ocr_url"/&gt;
    &lt;/var-def&gt;

    &lt;try&gt;
        &lt;body&gt;
            &lt;secrets-vault-get alias="ocr-creds" /&gt;
        &lt;/body&gt;
        &lt;catch&gt;
        &lt;/catch&gt;
    &lt;/try&gt;

    &lt;script&gt;&lt;![CDATA[
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.methods.multipart.FilePart;  
import org.apache.commons.httpclient.methods.multipart.StringPart; 
import org.apache.commons.httpclient.methods.multipart.ByteArrayPartSource;  
import org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity;  
import org.apache.commons.httpclient.methods.multipart.Part; 
import java.text.SimpleDateFormat;
import java.util.Base64;
import org.xml.sax.InputSource;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathFactory;

  String ocr_username = "";
  String ocr_password = "";
  if(sys.isVariableDefined("secureEntryMap")){
    Map entryMap = secureEntryMap.getWrappedObject();
    com.freedomoss.crowdcontrol.webharvest.web.dto.SecureEntryDTO obj = entryMap.get("ocr-creds");
    String ocr_username = obj.getKey().toString();
    String ocr_password = obj.getValue().toString();
  }

if(is_logging_enabled.toBoolean())
	log.warn("submitting with no authentication "+original_document_url.toString());
GetMethod getMethod = new GetMethod(original_document_url.toString());
  
        http.client.executeMethod(getMethod);
        byte[] buf = getMethod.getResponseBody();
 		getMethod.releaseConnection();
        PostMethod postMethod = new PostMethod(ocr_url.toString()+"/submitImage");
        if(!ocr_username.toString().isEmpty() &amp;&amp; !ocr_password.toString().isEmpty()){
                encoding = Base64.getEncoder().encodeToString((ocr_username.toString()+":"+ocr_password.toString()).getBytes());
                postMethod.setRequestHeader("Authorization","Basic " + encoding);
        }
        Part[] parts = new Part[1];  
        parts[0] =  new FilePart("file", new ByteArrayPartSource("PDF", buf)) ;  
        postMethod.setRequestEntity(new MultipartRequestEntity(parts, postMethod.getParams()));  
        http.client.executeMethod(postMethod);   
        statusCode = postMethod.getStatusCode();   
        response = postMethod.getResponseBodyAsString(); 
		InputSource source1 = new InputSource(new StringReader(response));
		XPathFactory xpathFactory = XPathFactory.newInstance();
		XPath xpath = xpathFactory.newXPath();
		taskId = xpath.evaluate("//response/task/@id", source1);
		if(is_logging_enabled.toBoolean())
			log.info("task created "+taskId);


        if(pagesList.getWrappedObject().size()&gt;1){
          parts = new Part[2];  
          parts[1] = new StringPart("taskId", taskId.toString());
          for( Object pagesListElement : pagesList.getWrappedObject()){
                  getMethod = new GetMethod(pagesListElement.toString());
				if(is_logging_enabled.toBoolean())
                  log.info(pagesListElement.toString());
                  System.out.println("GET " + getMethod.getURI());
                  http.client.executeMethod(getMethod);
                  buf = getMethod.getResponseBody();
                  getMethod.releaseConnection();
                  postMethod = new PostMethod(ocr_url.toString()+"/submitImage");
                  parts[0] =  new FilePart("file", new ByteArrayPartSource("PDF", buf)); 
                  postMethod.setRequestEntity(new MultipartRequestEntity(parts, postMethod.getParams())); 
                  http.client.executeMethod(postMethod);   
                  statusCode = postMethod.getStatusCode();   
                  response = postMethod.getResponseBodyAsString();   
				if(is_logging_enabled.toBoolean())
                  log.warn("Response:" + response.toString() + ": " + statusCode);   
          }
        }

		//-------------------------------------------------------making processDocument url-------------------------------------------------------
		String url = ocr_url.toString() + "/processDocument?taskId=" + taskId.toString() + "&amp;exportFormat=" + no_cached_export_format.toString() + "&amp;language=" + document_language.toString() + "&amp;xml:writeRecognitionVariants=" + ocr_xml_char_recognition.toString() + "&amp;correctSkew=true&amp;correctOrientation=true&amp;allowedRegionTypes=" + allowed_region_types.toString() + "&amp;invertImage=" + invert_image.toString() + "&amp;discardColorImage=" + discard_color_image.toString() + "&amp;removeColorObjectsType=" + remove_color_objects_type.toString();
		StringBuilder process_document_url = new StringBuilder(url.toString());
		
		if( !custom_regions.toString().isEmpty()) {
			process_document_url.append("&amp;customRegions=" + custom_regions.toString());
		}

		if( !change_dpi.toString().isEmpty()) {
			process_document_url.append("&amp;changeDPI=" + change_dpi.toString());
		}

		if( !remove_color_objects.toString().isEmpty()) {
			process_document_url.append("&amp;removeColorObjects=" + remove_color_objects.toString());
		}

        getMethod = new GetMethod(process_document_url.toString());
        if(!ocr_username.toString().isEmpty() &amp;&amp; !ocr_password.toString().isEmpty()){
                encoding = Base64.getEncoder().encodeToString((ocr_username.toString()+":"+ocr_password.toString()).getBytes());
                getMethod.setRequestHeader("Authorization","Basic " + encoding);
        }
        http.client.executeMethod(getMethod);
	if(is_logging_enabled.toBoolean())
		log.info("processing task"+taskId);
	]]&gt;&lt;/script&gt;

    &lt;export include-original-data="true"&gt;
        &lt;single-column name="ocr_task_id" value="${taskId}"/&gt;
    &lt;/export&gt;
&lt;/config&gt;</content>
                                    <description></description>
                                    <includedConfigs/>
                                    <inclusionCode>debcf0f2-3926-4da2-9ef5-9d26b46e3546</inclusionCode>
                                    <jsonParams>{"configXMLModified":"true"}</jsonParams>
                                    <machineWorkSetting>
                                        <category>
                                            <automation>false</automation>
                                            <description></description>
                                            <enabled>true</enabled>
                                            <executingType>MACHINE</executingType>
                                            <name>Other</name>
                                            <private>false</private>
                                            <publicId>dd92f240-144b-4fef-8476-4ec0acbc1105</publicId>
                                        </category>
                                        <contentType>BLANK</contentType>
                                        <description></description>
                                        <enabled>true</enabled>
                                        <name>Miscellaneous Tasks</name>
                                        <publicId>26e6e095-00bb-43fa-8c34-af0b18e71ac9</publicId>
                                        <version>
                                            <componentUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2018-07-09T12:40:36Z</lastModified>
                                            <versionUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</versionUuid>
                                        </version>
                                        <answers/>
                                        <machineWorkSettingType>BASIC</machineWorkSettingType>
                                        <template>
                                            <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                            <name>Blank</name>
                                            <origination>CREATED_MANUALLY</origination>
                                            <status>ACTIVE</status>
                                            <type>BASE_MACHINE</type>
                                            <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                            <version>
                                                <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                                <incrementalVersion>1.0</incrementalVersion>
                                                <lastInChain>true</lastInChain>
                                                <lastModified>2012-12-27T00:00:00Z</lastModified>
                                                <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                            </version>
                                        </template>
                                    </machineWorkSetting>
                                    <machineWorkSettingType>BASIC</machineWorkSettingType>
                                    <name>[TOOD] OCR</name>
                                    <machineConfigOptions/>
                                    <sourceType>MANUAL</sourceType>
                                    <template>
                                        <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                        <name>Blank</name>
                                        <origination>CREATED_MANUALLY</origination>
                                        <status>ACTIVE</status>
                                        <type>BASE_MACHINE</type>
                                        <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                        <version>
                                            <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2012-12-27T00:00:00Z</lastModified>
                                            <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                        </version>
                                    </template>
                                    <uuid>debcf0f2-3926-4da2-9ef5-9d26b46e3546</uuid>
                                    <version>
                                        <componentUuid>e39c0408-4ef1-4448-a091-a4098ad921e4</componentUuid>
                                        <incrementalVersion>1.58</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2018-08-13T11:41:07Z</lastModified>
                                        <versionUuid>a7fcf2bf-07d6-4977-b70e-7c547b45c2cb</versionUuid>
                                    </version>
                                </machineConfig>
                                <moderation>false</moderation>
                                <origination>CREATED_AUTOMATICALLY</origination>
                                <requiresData>true</requiresData>
                                <status>ACTIVE</status>
                                <streamComplexRunThreshold>1</streamComplexRunThreshold>
                                <streamTimeInterval>Immediately</streamTimeInterval>
                                <streamTimeIntervalValue>0</streamTimeIntervalValue>
                                <streamValueType>Tasks</streamValueType>
                                <title>[TOOD] OCR</title>
                                <type>SINGLE</type>
                                <uuid>3dab49e1-4c73-4132-9193-983b4951f4d5</uuid>
                                <validWorkflow>false</validWorkflow>
                                <version>
                                    <componentUuid>aa2d51d8-62b0-4114-bc55-856f662381bc</componentUuid>
                                    <incrementalVersion>1.21</incrementalVersion>
                                    <lastInChain>true</lastInChain>
                                    <lastModified>2018-08-13T11:41:07Z</lastModified>
                                    <versionUuid>2ddf2286-d801-4db9-a1ac-e2b379917ba9</versionUuid>
                                </version>
                                <workSettingBase>false</workSettingBase>
                            </campaign>
                            <deleted>false</deleted>
                            <stepIndex>2</stepIndex>
                            <stepPosition>INTERMEDIATE</stepPosition>
                            <streamed>false</streamed>
                            <uuid>f615b752-4574-49d1-855f-66708b8eb892</uuid>
                        </campaignMap>
                        <campaignMap>
                            <blockSize>1</blockSize>
                            <businessRule>
                                <content># Rule.Definition={"moderationRule":false,"approveAllRule":false,"splitData":false,"splitRule":false,"splitRuleSuffix":"","joinRule":false,"joinRuleSuffix":"","streamingRule":false,"streamingRuleSuffix":"","namedRule":false,"namedRuleName":""}
package com.freedomoss.requester;

# list any import classes here.
import java.util.Map;
import java.util.ArrayList;
import com.freedomoss.objective.model.CompositeRuleContext;
import com.freedomoss.objective.model.CompositeRuleDataItemContext;
import org.slf4j.Logger;


# declare any global variables here
global CompositeRuleContext source
global Logger log
global Map params


rule "Rule context initialization"
auto-focus true
no-loop
agenda-group "initialization-group"
    when
        $ctx:CompositeRuleContext(initialized == false);
    then
        # insert processed facts into memory
        $ctx.updateWorkingMemory();
        # move to business rules
        kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("calculation").setFocus();
end

# RuleOutcome.Definition={"outcomeId":"Yes","conditional":true,"reworkBySameWorker":false,"assignToSameWorker":false,"anableLogging":false,"sendRejectNotification":false,"assignToAnyWorker":false,"approveRelatedAssignments":false,"rejectRelatedAssignments":false,"renameAutomationAnswerItem":false,"conditions":[{"fieldName":"cache_hit","value":"full","operator":"EQ"}],"customConditions":[]}
rule "1. Send records to 'Yes' when cache_hit EQ 'full'"
agenda-group "calculation"
dialect "mvel"
salience 100
    when
        $ctx:CompositeRuleContext(initialized == true);
        $item:CompositeRuleDataItemContext();
        eval($item.checkValue("cache_hit", "EQ", "full"));

    then
        $ctx.sendResultTo("Yes", $item);
end



# RuleOutcome.Definition={"outcomeId":"No","conditional":false,"reworkBySameWorker":false,"assignToSameWorker":false,"anableLogging":false,"sendRejectNotification":false,"assignToAnyWorker":false,"approveRelatedAssignments":false,"rejectRelatedAssignments":false,"renameAutomationAnswerItem":false,"conditions":[],"customConditions":[]}
rule "Send unprocessed result to unconditional outcome(s)"
agenda-group "calculation"
dialect "mvel"
salience 80
    when
        $ctx:CompositeRuleContext(initialized == true);
        $item:CompositeRuleDataItemContext();
    then
        $ctx.sendResultToUnconditionalOutcomes($item, true);
end</content>
                                <name>Cache hit?</name>
                                <ruleType>WORKFLOW_RULE</ruleType>
                                <ruleTypeUI>Composite</ruleTypeUI>
                                <uuid>076cc447-29ad-4292-93ce-48413867404a</uuid>
                                <workflowRuleMode>SIMPLE</workflowRuleMode>
                            </businessRule>
                            <campaign>
                                <active>false</active>
                                <businessRules/>
                                <campaignMaps/>
                                <campaigns/>
                                <executingType>MACHINE</executingType>
                                <goldBucketBlockSize>0</goldBucketBlockSize>
                                <goldRatio>0</goldRatio>
                                <goldSource>Empty</goldSource>
                                <goldType>Percentage</goldType>
                                <machineConfig>
                                    <answers/>
                                    <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;!--
Step to look for OCR cache for each OCR export format by all input parameters, and if it full hits we go to last BP step, otherwise go to the OCR step.

@Author: Alexey Shalak
@Version: 1.0
Workfusion 2018, RPA Express 2.0
--&gt;

&lt;config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config"
	scriptlang="groovy"&gt;

	&lt;var-def name="document_link"&gt;
		&lt;template&gt;${sys.getVar("original_document_url")}&lt;/template&gt;
	&lt;/var-def&gt;
  
      &lt;var-def name="skip_ocr_cache"&gt;
        &lt;template&gt;${skip_ocr_cache}&lt;/template&gt;
    &lt;/var-def&gt;

	&lt;script&gt;&lt;![CDATA[
		isUnsuccessfulStatusCode = {statusCode -&gt; return statusCode.toString().matches('^[45]\\d{2}')};
	]]&gt;&lt;/script&gt;

	&lt;try&gt;
		&lt;body&gt;
			&lt;var-def name="document"&gt;
				&lt;http url="${document_link}" /&gt;
			&lt;/var-def&gt;
		&lt;/body&gt;
		&lt;catch&gt;
		&lt;/catch&gt;
	&lt;/try&gt;

	&lt;case&gt;
		&lt;if condition="${isUnsuccessfulStatusCode(http.statusCode)}"&gt;
			&lt;try&gt;
				&lt;body&gt;
					&lt;var-def name="document_link"&gt;
						&lt;template&gt;${org.apache.commons.httpclient.util.URIUtil.encodeQuery(document_link.toString())}
						&lt;/template&gt;
					&lt;/var-def&gt;
					&lt;var-def name="document"&gt;
						&lt;http url="${document_link}" /&gt;
					&lt;/var-def&gt;
				&lt;/body&gt;
				&lt;catch&gt;
				&lt;/catch&gt;
			&lt;/try&gt;
		&lt;/if&gt;
	&lt;/case&gt;

	&lt;case&gt;
		&lt;if condition="${isUnsuccessfulStatusCode(http.statusCode)}"&gt;
			&lt;script&gt;&lt;![CDATA[
				throw new RuntimeException("Failed to fetch url: " + document_link + " status code: " + http.statusCode);
			]]&gt;&lt;/script&gt;
		&lt;/if&gt;
	&lt;/case&gt;

	&lt;var-def name="document_hash"&gt;
		&lt;template&gt;${sys.getVar("document_hash")}&lt;/template&gt;
	&lt;/var-def&gt;
	&lt;case&gt;
		&lt;if condition="${document_hash.toString().length() == 0}"&gt;
			&lt;var-def name="document_hash"&gt;
				&lt;script
					return="org.apache.commons.codec.digest.DigestUtils.md5Hex(document.toBinary())" /&gt;
			&lt;/var-def&gt;
		&lt;/if&gt;
	&lt;/case&gt;

	&lt;script&gt;&lt;![CDATA[
		import com.google.gson.Gson;
		export_format_list = Arrays.asList(export_format.toString().split(","));
		sys.defineVariable("exportFormatList", export_format_list);

		no_cached_export_format_list = new ArrayList(export_format_list);
		String no_cached_export_format = no_cached_export_format_list.toString().replaceAll("[\\[\\]\\s]","");
		sys.defineVariable("no_cached_export_format", no_cached_export_format);

		List ocr_result_list = new ArrayList();
		sys.defineVariable("ocr_result_list", ocr_result_list);

		Gson gson = new Gson();
		String result_json = gson.toJson(ocr_result_list.toList());
		sys.defineVariable("cached_ocr_json", result_json);
	]]&gt;&lt;/script&gt;
  &lt;case&gt;
     &lt;if condition='${skip_ocr_cache.toString().length() == 0 || skip_ocr_cache.toString().equals("0") }'&gt;
                    
  	&lt;!-- If the datastore is missing --&gt;
	&lt;create-datastore name="${cache_datastore}"&gt;
		&lt;datastore-column name="key" /&gt;
		&lt;datastore-column name="ocr_type" /&gt;
		&lt;datastore-column name="export_format" /&gt;
		&lt;datastore-column name="document_language" /&gt;
		&lt;datastore-column name="ocr_xml_char_recognition" /&gt;
		&lt;datastore-column name="allowed_region_types" /&gt;
		&lt;datastore-column name="custom_regions" /&gt;
		&lt;datastore-column name="change_dpi" /&gt;
		&lt;datastore-column name="invert_image" /&gt;
		&lt;datastore-column name="discard_color_image" /&gt;
		&lt;datastore-column name="remove_color_objects" /&gt;
		&lt;datastore-column name="remove_color_objects_type" /&gt;
	&lt;/create-datastore&gt;

	&lt;loop item="format"&gt;
		&lt;list&gt;
			&lt;var name="exportFormatList" /&gt;
		&lt;/list&gt;
		&lt;body&gt;
			&lt;var-def name="cachedRecord"&gt;
				&lt;datastore name="${cache_datastore}" max="1"&gt;
            		&lt;template&gt;
            			SELECT * FROM @this WHERE "key"='${document_hash}' AND "ocr_type"='${ocr_type}' AND "export_format"='${format}' AND "document_language"='${document_language}' AND "ocr_xml_char_recognition"='${ocr_xml_char_recognition}' AND "allowed_region_types"='${allowed_region_types}' AND "custom_regions"='${custom_regions}' AND "change_dpi"='${change_dpi}' AND "invert_image"='${invert_image}' AND "discard_color_image"='${discard_color_image}' AND "remove_color_objects"='${remove_color_objects}' AND "remove_color_objects_type"='${remove_color_objects_type}'    
          			&lt;/template&gt;
				&lt;/datastore&gt;
			&lt;/var-def&gt;
          
          	&lt;case&gt;
				&lt;if condition='${cachedRecord.toString().length() != 0}'&gt;
                  	&lt;var-def name="value"&gt;
                            &lt;xpath expression='/row/ocr_json/text()'&gt;
                                &lt;var name="cachedRecord"/&gt;
                            &lt;/xpath&gt;
                    &lt;/var-def&gt;
                  
					&lt;script&gt;&lt;![CDATA[
						no_cached_export_format_list.remove(format.toString());

						ocr_result_list.toList().add(new HashMap(new groovy.json.JsonSlurper().parseText(value.toString())));
					]]&gt;&lt;/script&gt;
				&lt;/if&gt;
			&lt;/case&gt;  
		&lt;/body&gt;
	&lt;/loop&gt;
  
  	&lt;script&gt;&lt;![CDATA[
		import com.google.gson.Gson;

		String no_cached_export_format = no_cached_export_format_list.toString().replaceAll("[\\[\\]\\s]","");
		sys.defineVariable("no_cached_export_format", no_cached_export_format);

		Gson gson = new Gson();
		String result_json = gson.toJson(ocr_result_list.toList());
		sys.defineVariable("cached_ocr_json", result_json);
	]]&gt;&lt;/script&gt;

	&lt;export include-original-data="true"&gt;
		&lt;single-column name="document_hash" value="${document_hash}" /&gt;
      	&lt;single-column name="no_cached_export_format" value="${no_cached_export_format}" /&gt;
      	&lt;case&gt;
            &lt;if condition='${no_cached_export_format_list.size() == export_format_list.size()}'&gt;
            	&lt;single-column name="cache_hit" value="none"/&gt;
            &lt;/if&gt;
          	&lt;if condition='${no_cached_export_format_list.size() == 0}'&gt;
            	&lt;single-column name="cache_hit" value="full"/&gt;
              	&lt;single-column name="ocr_failed" value="false"/&gt;
            &lt;/if&gt;
            &lt;else&gt;
                &lt;single-column name="cache_hit" value="half"/&gt;
            &lt;/else&gt;
        &lt;/case&gt;
      	&lt;single-column name="cached_ocr_json" value="${cached_ocr_json}" /&gt;
	&lt;/export&gt;
       &lt;/if&gt;
                &lt;else&gt;
                    	&lt;export include-original-data="true"&gt;
		&lt;single-column name="document_hash" value="${document_hash}" /&gt;
      	&lt;single-column name="no_cached_export_format" value="${no_cached_export_format}" /&gt;
      	&lt;single-column name="cache_hit" value="none"/&gt;
        &lt;single-column name="cached_ocr_json" value="${cached_ocr_json}" /&gt;
	&lt;/export&gt;
                &lt;/else&gt;
            &lt;/case&gt;
&lt;/config&gt;</content>
                                    <description></description>
                                    <includedConfigs/>
                                    <inclusionCode>0f9a2bf3-a8bd-43ca-88dd-953b6c3871b5</inclusionCode>
                                    <jsonParams>{"configXMLModified":"true"}</jsonParams>
                                    <machineWorkSetting>
                                        <category>
                                            <automation>false</automation>
                                            <description></description>
                                            <enabled>true</enabled>
                                            <executingType>MACHINE</executingType>
                                            <name>Other</name>
                                            <private>false</private>
                                            <publicId>dd92f240-144b-4fef-8476-4ec0acbc1105</publicId>
                                        </category>
                                        <contentType>BLANK</contentType>
                                        <description></description>
                                        <enabled>true</enabled>
                                        <name>Miscellaneous Tasks</name>
                                        <publicId>26e6e095-00bb-43fa-8c34-af0b18e71ac9</publicId>
                                        <version>
                                            <componentUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2018-07-09T12:40:36Z</lastModified>
                                            <versionUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</versionUuid>
                                        </version>
                                        <answers/>
                                        <machineWorkSettingType>BASIC</machineWorkSettingType>
                                        <template>
                                            <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                            <name>Blank</name>
                                            <origination>CREATED_MANUALLY</origination>
                                            <status>ACTIVE</status>
                                            <type>BASE_MACHINE</type>
                                            <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                            <version>
                                                <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                                <incrementalVersion>1.0</incrementalVersion>
                                                <lastInChain>true</lastInChain>
                                                <lastModified>2012-12-27T00:00:00Z</lastModified>
                                                <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                            </version>
                                        </template>
                                    </machineWorkSetting>
                                    <machineWorkSettingType>BASIC</machineWorkSettingType>
                                    <name>Look for OCR cache</name>
                                    <machineConfigOptions/>
                                    <sourceType>MANUAL</sourceType>
                                    <template>
                                        <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                        <name>Blank</name>
                                        <origination>CREATED_MANUALLY</origination>
                                        <status>ACTIVE</status>
                                        <type>BASE_MACHINE</type>
                                        <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                        <version>
                                            <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2012-12-27T00:00:00Z</lastModified>
                                            <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                        </version>
                                    </template>
                                    <uuid>0f9a2bf3-a8bd-43ca-88dd-953b6c3871b5</uuid>
                                    <version>
                                        <componentUuid>7cb14104-af75-43fe-aff5-86e9d8780b4f</componentUuid>
                                        <incrementalVersion>1.6</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2018-08-07T14:13:40Z</lastModified>
                                        <versionUuid>23386164-9de3-4b80-a421-c8cc8447a70e</versionUuid>
                                    </version>
                                </machineConfig>
                                <moderation>false</moderation>
                                <origination>CREATED_AUTOMATICALLY</origination>
                                <requiresData>true</requiresData>
                                <status>ACTIVE</status>
                                <streamComplexRunThreshold>1</streamComplexRunThreshold>
                                <streamTimeInterval>Immediately</streamTimeInterval>
                                <streamTimeIntervalValue>0</streamTimeIntervalValue>
                                <streamValueType>Tasks</streamValueType>
                                <title>Look for OCR cache</title>
                                <type>SINGLE</type>
                                <uuid>156f7ef5-ad40-4af6-b692-6745c6a329c3</uuid>
                                <validWorkflow>false</validWorkflow>
                                <version>
                                    <componentUuid>1339b2d0-655f-4d34-9ce0-9808950f4bb2</componentUuid>
                                    <incrementalVersion>1.7</incrementalVersion>
                                    <lastInChain>true</lastInChain>
                                    <lastModified>2018-08-07T14:13:40Z</lastModified>
                                    <versionUuid>6cea32b3-3a8e-47d2-8c89-763c77ea5e60</versionUuid>
                                </version>
                                <workSettingBase>false</workSettingBase>
                            </campaign>
                            <deleted>false</deleted>
                            <stepIndex>3</stepIndex>
                            <stepPosition>INTERMEDIATE</stepPosition>
                            <streamed>false</streamed>
                            <uuid>4e05e310-1dc7-47cd-9624-aaf48b4f7646</uuid>
                        </campaignMap>
                        <campaignMap>
                            <blockSize>1</blockSize>
                            <businessRule>
                                <content>#RuleContext.APPROVE_ALL_RULE</content>
                                <name>Approve All</name>
                                <ruleType>WORKFLOW_RULE</ruleType>
                                <ruleTypeUI>Composite</ruleTypeUI>
                                <uuid>58b9dc28-d7b3-4122-9bfe-d02dfcd24c4c</uuid>
                                <workflowRuleMode>SIMPLE</workflowRuleMode>
                            </businessRule>
                            <campaign>
                                <active>false</active>
                                <businessRules/>
                                <campaignMaps/>
                                <campaigns/>
                                <executingType>MACHINE</executingType>
                                <goldBucketBlockSize>0</goldBucketBlockSize>
                                <goldRatio>0</goldRatio>
                                <goldSource>Empty</goldSource>
                                <goldType>Percentage</goldType>
                                <machineConfig>
                                    <answers/>
                                    <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;!--
Step to get OCR result JSON and update it for comfortable using after.

@Author: Alexey Shalak
@Version: 1.0
Workfusion 2018, RPA Express 2.0
--&gt;

&lt;config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config"
	scriptlang="groovy"&gt;

	&lt;script&gt;&lt;![CDATA[
		import groovy.json.JsonSlurper;

		List&lt;Map&gt; cached_ocr_result_list = new JsonSlurper().parseText(cached_ocr_json.toString());
		sys.defineVariable("cached_ocr_result_list", cached_ocr_result_list);
		
		List&lt;Map&gt; ocr_result_list = new ArrayList();
		if( sys.isVariableDefined("ocr_json")) {
			ocr_result_list = new JsonSlurper().parseText(ocr_json.toString());
		}
		sys.defineVariable("ocr_result_list", ocr_result_list);

		Map&lt;String,Map&lt;String, String&gt;&gt; update_ocr_result_map = new HashMap();
		sys.defineVariable("update_ocr_result_map", update_ocr_result_map);
	]]&gt;&lt;/script&gt;
      
  	&lt;loop item="map"&gt;
		&lt;list&gt;
			&lt;var name="cached_ocr_result_list" /&gt;
		&lt;/list&gt;
		&lt;body&gt;
			&lt;script&gt;&lt;![CDATA[
				String ocr_export_format = map.getWrappedObject().get("ocr_export_format").toString();
				
				map.getWrappedObject().remove("original_document_name");
				map.getWrappedObject().remove("ocr_document_name");
				map.getWrappedObject().remove("ocr_raw_processed_document_name");
				map.getWrappedObject().remove("ocr_tood_document_name");
				
				update_ocr_result_map.getWrappedObject().put(ocr_export_format, map.getWrappedObject());
			]]&gt;&lt;/script&gt;
		&lt;/body&gt;
	&lt;/loop&gt;
  
	&lt;loop item="map"&gt;
		&lt;list&gt;
			&lt;var name="ocr_result_list" /&gt;
		&lt;/list&gt;
		&lt;body&gt;
			&lt;script&gt;&lt;![CDATA[
				String ocr_export_format = map.getWrappedObject().get("ocr_export_format").toString();
				
				map.getWrappedObject().remove("original_document_name");
				map.getWrappedObject().remove("ocr_document_name");
				map.getWrappedObject().remove("ocr_raw_processed_document_name");
				map.getWrappedObject().remove("ocr_tood_document_name");
				
				update_ocr_result_map.getWrappedObject().put(ocr_export_format, map.getWrappedObject());
			]]&gt;&lt;/script&gt;
		&lt;/body&gt;
	&lt;/loop&gt;

	&lt;script&gt;&lt;![CDATA[
		import com.google.gson.Gson;

		Gson gson = new Gson();
		String result_json = gson.toJson(update_ocr_result_map.getWrappedObject());
		sys.defineVariable("ocr_json", result_json);
	]]&gt;&lt;/script&gt;

	&lt;export include-original-data="true"&gt;
		&lt;single-column name="ocr_json" value="${ocr_json}" /&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                    <description></description>
                                    <includedConfigs/>
                                    <inclusionCode>27b4bfe7-c786-47e5-a784-29e630f88527</inclusionCode>
                                    <jsonParams>{"configXMLModified":"true"}</jsonParams>
                                    <machineWorkSetting>
                                        <category>
                                            <automation>false</automation>
                                            <description></description>
                                            <enabled>true</enabled>
                                            <executingType>MACHINE</executingType>
                                            <name>Other</name>
                                            <private>false</private>
                                            <publicId>dd92f240-144b-4fef-8476-4ec0acbc1105</publicId>
                                        </category>
                                        <contentType>BLANK</contentType>
                                        <description></description>
                                        <enabled>true</enabled>
                                        <name>Miscellaneous Tasks</name>
                                        <publicId>26e6e095-00bb-43fa-8c34-af0b18e71ac9</publicId>
                                        <version>
                                            <componentUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2018-07-09T12:40:36Z</lastModified>
                                            <versionUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</versionUuid>
                                        </version>
                                        <answers/>
                                        <machineWorkSettingType>BASIC</machineWorkSettingType>
                                        <template>
                                            <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                            <name>Blank</name>
                                            <origination>CREATED_MANUALLY</origination>
                                            <status>ACTIVE</status>
                                            <type>BASE_MACHINE</type>
                                            <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                            <version>
                                                <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                                <incrementalVersion>1.0</incrementalVersion>
                                                <lastInChain>true</lastInChain>
                                                <lastModified>2012-12-27T00:00:00Z</lastModified>
                                                <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                            </version>
                                        </template>
                                    </machineWorkSetting>
                                    <machineWorkSettingType>BASIC</machineWorkSettingType>
                                    <name>Result JSON processing</name>
                                    <machineConfigOptions/>
                                    <sourceType>MANUAL</sourceType>
                                    <template>
                                        <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                        <name>Blank</name>
                                        <origination>CREATED_MANUALLY</origination>
                                        <status>ACTIVE</status>
                                        <type>BASE_MACHINE</type>
                                        <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                        <version>
                                            <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2012-12-27T00:00:00Z</lastModified>
                                            <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                        </version>
                                    </template>
                                    <uuid>27b4bfe7-c786-47e5-a784-29e630f88527</uuid>
                                    <version>
                                        <componentUuid>d92b7eb5-89f2-40ac-9873-11f9c60a6349</componentUuid>
                                        <incrementalVersion>1.1</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2018-08-03T14:58:21Z</lastModified>
                                        <versionUuid>93f0ad4a-c375-41bd-9bf0-53388f59a8fe</versionUuid>
                                    </version>
                                </machineConfig>
                                <moderation>false</moderation>
                                <origination>CREATED_AUTOMATICALLY</origination>
                                <requiresData>true</requiresData>
                                <status>ACTIVE</status>
                                <streamComplexRunThreshold>1</streamComplexRunThreshold>
                                <streamTimeInterval>Immediately</streamTimeInterval>
                                <streamTimeIntervalValue>0</streamTimeIntervalValue>
                                <streamValueType>Tasks</streamValueType>
                                <title>Result JSON processing</title>
                                <type>SINGLE</type>
                                <uuid>5967587c-06c0-4fc3-9cfd-cb279159e617</uuid>
                                <validWorkflow>false</validWorkflow>
                                <version>
                                    <componentUuid>2ea6bec4-e356-4a19-817d-9824e3bff92d</componentUuid>
                                    <incrementalVersion>1.1</incrementalVersion>
                                    <lastInChain>true</lastInChain>
                                    <lastModified>2018-08-13T12:20:51Z</lastModified>
                                    <versionUuid>5485fb09-2839-407a-ad7f-f7138c1d80f9</versionUuid>
                                </version>
                                <workSettingBase>false</workSettingBase>
                            </campaign>
                            <deleted>false</deleted>
                            <stepIndex>4</stepIndex>
                            <stepPosition>INTERMEDIATE</stepPosition>
                            <streamed>false</streamed>
                            <uuid>d66706f9-72c3-4128-9b20-6a19caca8b69</uuid>
                        </campaignMap>
                        <campaignMap>
                            <blockSize>1</blockSize>
                            <businessRule>
                                <content># Rule.Definition={"moderationRule":false,"approveAllRule":false,"splitData":false,"splitRule":false,"splitRuleSuffix":"","joinRule":false,"joinRuleSuffix":"","streamingRule":false,"streamingRuleSuffix":"","namedRule":false,"namedRuleName":""}
package com.freedomoss.requester;

# list any import classes here.
import java.util.Map;
import java.util.ArrayList;
import com.freedomoss.objective.model.CompositeRuleContext;
import com.freedomoss.objective.model.CompositeRuleDataItemContext;
import org.slf4j.Logger;


# declare any global variables here
global CompositeRuleContext source
global Logger log
global Map params


rule "Rule context initialization"
auto-focus true
no-loop
agenda-group "initialization-group"
    when
        $ctx:CompositeRuleContext(initialized == false);
    then
        # insert processed facts into memory
        $ctx.updateWorkingMemory();
        # move to business rules
        kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("calculation").setFocus();
end

# RuleOutcome.Definition={"outcomeId":"TOOD","conditional":true,"reworkBySameWorker":false,"assignToSameWorker":false,"anableLogging":false,"sendRejectNotification":false,"assignToAnyWorker":false,"approveRelatedAssignments":false,"rejectRelatedAssignments":false,"renameAutomationAnswerItem":false,"conditions":[{"fieldName":"ocr_type","value":"tood","operator":"EQ"}],"customConditions":[]}
rule "1. Send records to 'TOOD' when ocr_type EQ 'tood'"
agenda-group "calculation"
dialect "mvel"
salience 100
    when
        $ctx:CompositeRuleContext(initialized == true);
        $item:CompositeRuleDataItemContext();
        eval($item.checkValue("ocr_type", "EQ", "tood"));

    then
        $ctx.sendResultTo("TOOD", $item);
end

# RuleOutcome.Definition={"outcomeId":"Standard","conditional":true,"reworkBySameWorker":false,"assignToSameWorker":false,"anableLogging":false,"sendRejectNotification":false,"assignToAnyWorker":false,"approveRelatedAssignments":false,"rejectRelatedAssignments":false,"renameAutomationAnswerItem":false,"conditions":[{"fieldName":"ocr_type","value":"standard","operator":"EQ"}],"customConditions":[]}
rule "2. Send records to 'Standard' when ocr_type EQ 'standard'"
agenda-group "calculation"
dialect "mvel"
salience 100
    when
        $ctx:CompositeRuleContext(initialized == true);
        $item:CompositeRuleDataItemContext();
        eval($item.checkValue("ocr_type", "EQ", "standard"));

    then
        $ctx.sendResultTo("Standard", $item);
end



rule "Send unprocessed result to unconditional outcome(s)"
agenda-group "calculation"
dialect "mvel"
salience 80
    when
        $ctx:CompositeRuleContext(initialized == true);
        $item:CompositeRuleDataItemContext();
    then
        $ctx.sendResultToUnconditionalOutcomes($item, true);
end</content>
                                <name>OCR Type</name>
                                <ruleType>WORKFLOW_RULE</ruleType>
                                <ruleTypeUI>Composite</ruleTypeUI>
                                <uuid>0998f1c4-9ccd-45b7-b0f3-d28f107238ca</uuid>
                                <workflowRuleMode>SIMPLE</workflowRuleMode>
                            </businessRule>
                            <campaign>
                                <active>false</active>
                                <businessRules/>
                                <campaignMaps/>
                                <campaigns/>
                                <executingType>MACHINE</executingType>
                                <goldBucketBlockSize>0</goldBucketBlockSize>
                                <goldRatio>0</goldRatio>
                                <goldSource>Empty</goldSource>
                                <goldType>Percentage</goldType>
                                <machineConfig>
                                    <answers/>
                                    <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                    <description></description>
                                    <includedConfigs/>
                                    <inclusionCode>642b57cc-6acf-4d32-be4a-d19623bd436a</inclusionCode>
                                    <jsonParams>{"configXMLModified":"true"}</jsonParams>
                                    <machineWorkSetting>
                                        <category>
                                            <automation>false</automation>
                                            <description></description>
                                            <enabled>true</enabled>
                                            <executingType>MACHINE</executingType>
                                            <name>Other</name>
                                            <private>false</private>
                                            <publicId>dd92f240-144b-4fef-8476-4ec0acbc1105</publicId>
                                        </category>
                                        <contentType>BLANK</contentType>
                                        <description></description>
                                        <enabled>true</enabled>
                                        <name>Miscellaneous Tasks</name>
                                        <publicId>26e6e095-00bb-43fa-8c34-af0b18e71ac9</publicId>
                                        <version>
                                            <componentUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2018-07-09T12:40:36Z</lastModified>
                                            <versionUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</versionUuid>
                                        </version>
                                        <answers/>
                                        <machineWorkSettingType>BASIC</machineWorkSettingType>
                                        <template>
                                            <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                            <name>Blank</name>
                                            <origination>CREATED_MANUALLY</origination>
                                            <status>ACTIVE</status>
                                            <type>BASE_MACHINE</type>
                                            <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                            <version>
                                                <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                                <incrementalVersion>1.0</incrementalVersion>
                                                <lastInChain>true</lastInChain>
                                                <lastModified>2012-12-27T00:00:00Z</lastModified>
                                                <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                            </version>
                                        </template>
                                    </machineWorkSetting>
                                    <machineWorkSettingType>BASIC</machineWorkSettingType>
                                    <name>GoTo OCR</name>
                                    <machineConfigOptions/>
                                    <sourceType>MANUAL</sourceType>
                                    <template>
                                        <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                        <name>Blank</name>
                                        <origination>CREATED_MANUALLY</origination>
                                        <status>ACTIVE</status>
                                        <type>BASE_MACHINE</type>
                                        <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                        <version>
                                            <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2012-12-27T00:00:00Z</lastModified>
                                            <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                        </version>
                                    </template>
                                    <uuid>642b57cc-6acf-4d32-be4a-d19623bd436a</uuid>
                                    <version>
                                        <componentUuid>0f2aeff6-0b70-4ce8-809c-155796e62792</componentUuid>
                                        <incrementalVersion>1.1</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2018-08-03T14:58:21Z</lastModified>
                                        <versionUuid>f7a7ec6d-88ea-4f2f-bce1-4d3f9ce84ac9</versionUuid>
                                    </version>
                                </machineConfig>
                                <moderation>false</moderation>
                                <origination>CREATED_AUTOMATICALLY</origination>
                                <requiresData>true</requiresData>
                                <status>ACTIVE</status>
                                <streamComplexRunThreshold>1</streamComplexRunThreshold>
                                <streamTimeInterval>Immediately</streamTimeInterval>
                                <streamTimeIntervalValue>0</streamTimeIntervalValue>
                                <streamValueType>Tasks</streamValueType>
                                <title>GoTo OCR</title>
                                <type>SINGLE</type>
                                <uuid>a7b9d471-e1f7-4101-b1ac-cff093698bc9</uuid>
                                <validWorkflow>false</validWorkflow>
                                <version>
                                    <componentUuid>abe90e37-fcae-4031-94c0-30fa05b2f5d9</componentUuid>
                                    <incrementalVersion>1.1</incrementalVersion>
                                    <lastInChain>true</lastInChain>
                                    <lastModified>2018-08-13T12:20:51Z</lastModified>
                                    <versionUuid>8fc8908e-9596-4cbe-889b-dafac89fd777</versionUuid>
                                </version>
                                <workSettingBase>false</workSettingBase>
                            </campaign>
                            <deleted>false</deleted>
                            <stepIndex>5</stepIndex>
                            <stepPosition>INTERMEDIATE</stepPosition>
                            <streamed>false</streamed>
                            <uuid>6e7159c5-2987-4ce8-a3d7-8fed7007ba51</uuid>
                        </campaignMap>
                        <campaignMap>
                            <blockSize>1</blockSize>
                            <businessRule>
                                <content>#RuleContext.APPROVE_ALL_RULE</content>
                                <name>Approve All</name>
                                <ruleType>WORKFLOW_RULE</ruleType>
                                <ruleTypeUI>Composite</ruleTypeUI>
                                <uuid>3ac307de-0068-44de-9e9d-da26ba9d94e7</uuid>
                                <workflowRuleMode>SIMPLE</workflowRuleMode>
                            </businessRule>
                            <campaign>
                                <active>true</active>
                                <businessRules/>
                                <campaignMaps/>
                                <campaigns/>
                                <description>OCR XML with variants to viewable XML</description>
                                <executingType>MACHINE</executingType>
                                <goldBucketBlockSize>0</goldBucketBlockSize>
                                <goldRatio>0</goldRatio>
                                <goldSource>Empty</goldSource>
                                <goldType>Percentage</goldType>
                                <machineConfig>
                                    <answers/>
                                    <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;!--
Step to make XSLT XML Enrichment with WORD and DIV tags processing for "row processed documents" from previous step, to prepare them for valid view on the TOOD HT, also put updated documents on S3 and update OCR JSON.

@Author: Alexey Shalak
@Version: 1.0
Workfusion 2018, RPA Express 2.0
--&gt;

&lt;config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config"
	scriptlang="java" charset="UTF-8"&gt;
  	
	&lt;script language="groovy"&gt;&lt;![CDATA[
		import groovy.json.JsonSlurper;

		List&lt;Map&gt; ocr_result_list = new JsonSlurper().parseText(ocr_json.toString());
		sys.defineVariable("ocr_result_list", ocr_result_list);

		List&lt;Map&gt; update_ocr_result_list = new ArrayList();
		sys.defineVariable("update_ocr_result_list", update_ocr_result_list);

		String ocr_document_name = ocr_result_list.get(0).get("ocr_document_name").toString();
		sys.defineVariable("ocr_document_name", ocr_document_name);

		String ocr_raw_processed_document_name = ocr_result_list.get(0).get("ocr_raw_processed_document_name").toString();
		sys.defineVariable("ocr_raw_processed_document_name", ocr_raw_processed_document_name);

		String ocr_document_format = ocr_result_list.get(0).get("ocr_document_format").toString();
		sys.defineVariable("ocr_document_format", ocr_document_format);
	]]&gt;&lt;/script&gt;
  
	&lt;var-def name="placeholder"&gt;
		&lt;template&gt;converted_pdf_link_PLACEHOLDER&lt;/template&gt;
	&lt;/var-def&gt;

  	&lt;var-def name="jsonKey"&gt;
		&lt;template&gt;fileList-1&lt;/template&gt;
	&lt;/var-def&gt;

    &lt;var-def name="lineHeight"&gt;
		&lt;template&gt;${use_line_height}&lt;/template&gt;
	&lt;/var-def&gt;  

  &lt;s3 bucket="${s3_bucket_name}"&gt;
		&lt;var-def name="xmlWordsDocument"&gt;
			&lt;s3-get name="${bp_run_id}/${document_uuid}/${ocr_raw_processed_document_name}.${ocr_document_format}" /&gt;
		&lt;/var-def&gt;
	&lt;/s3&gt;
  
	&lt;var-def name="imageLink"&gt;
		&lt;script return="getJSONValue(json_file_urls_for_manual.toString(), jsonKey.toString())"&gt;&lt;![CDATA[
			import org.json.XML;
			import java.util.List;
			import java.util.ArrayList;
			import org.json.JSONObject;
			import org.json.JSONArray;
			import com.freedomoss.workfusion.utils.gson.GsonUtils;


			static String getJSONValue(String jsonString, String key) {
				try{
					JSONObject json = new JSONObject(jsonString);
					return json.get(key).get("directUrl").toString();
				} catch (Exception e){
					return "";
				}
			}

			public static String addImgTag(String xml, String placeholder, String fileUrl){
				return xml.replace(placeholder, fileUrl.substring(0, fileUrl.length()-5));
			}

		]]&gt;&lt;/script&gt;
	&lt;/var-def&gt;

&lt;!-- XSLT transformation
@date: 07/17/2018
@Author: Mikalai Yatskevich mikalai_yatskevich@epam.com
 v3
--&gt;
	&lt;var-def name="htmlWordsDocumentRaw"&gt;
		&lt;xslt&gt;
			&lt;xml&gt;
				&lt;var name="xmlWordsDocument" /&gt;
			&lt;/xml&gt;
			&lt;stylesheet&gt;&lt;template&gt;&lt;![CDATA[ 
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:wfocr="http://ocr.crowdcomputingsystems.com/xml/schema-v1.xml"&gt;
    &lt;xsl:output method="html" omit-xml-declaration="yes" media-type="text/html" indent="no"/&gt;
    &lt;xsl:variable name="currentHeight"&gt;
        &lt;xsl:value-of select="sum(//page/@height)"/&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:variable name="isLineHeight"&gt;
        &lt;xsl:value-of select="true()"/&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:variable name="minimalFontHeight"&gt;
        &lt;xsl:value-of select="15"/&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:variable name="stopChars"&gt;
        &lt;xsl:value-of select='"&amp;apos;&amp;gt;&amp;lt;`&#8217;~!@#$%^\*()_-=+[]{}&#172;;:,./?|&#8220;&#174;&#171;&#187;&#8212;&#176;| "'/&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:variable name="stopCharsFirstWordInLine"&gt;
        &lt;xsl:value-of select='"&amp;apos;&amp;gt;&amp;lt;`&#8217;~!@#$%^\/*()_-=+[]{}&#172;;:?|&#8220;&#174;&#171;&#187;&#8212;&#176;|"'/&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:variable name="numberChars"&gt;
        &lt;xsl:value-of select="'-1234567890'"/&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:variable name="numberSeparators"&gt;
        &lt;xsl:value-of select="'., '"/&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:variable name="dateSeparators"&gt;
        &lt;xsl:value-of select="'./-'"/&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:variable name="space"&gt;
        &lt;xsl:value-of select="' '"/&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:template match="wfocr:document"&gt;
        &lt;html&gt;
            &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;!-- Version 1.7 --&amp;gt;&lt;/xsl:text&gt;
            &lt;head&gt;
                &lt;style type="text/css"&gt;div.n {position:absolute;white-space:nowrap;text-align:left;vertical-align:bottom;letter-spacing:0px;word-spacing:0px;} div.rc {position:absolute;-ms-layout-flow: vertical-ideographic;writing-mode: vertical-lr;white-space:nowrap;} div.rcc {position:absolute;-ms-layout-flow: vertical-ideographic;writing-mode: vertical-rl;transform: rotate(180deg);white-space:nowrap;} div.t {position:absolute;white-space:nowrap;}&lt;/style&gt;
            &lt;/head&gt;
            &lt;body&gt;
                &lt;xsl:attribute name="style"&gt;width:&lt;xsl:value-of select="./page/@width"/&gt;px; height:&lt;xsl:value-of select="$currentHeight"/&gt;px; border: 1px solid black; background-repeat: no-repeat; font-family: 'Helvetica', 'Arial', sans-serif; padding: 0;
                &lt;/xsl:attribute&gt;
                &lt;document id="TOOD"&gt;
                    &lt;xsl:copy-of select="./@*"/&gt;
                    &lt;xsl:apply-templates select="./wfocr:page"/&gt;
                &lt;/document&gt;
            &lt;/body&gt;
        &lt;/html&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template match="wfocr:page"&gt;
        &lt;page&gt;
            &lt;xsl:copy-of select="./@*"/&gt;
            &lt;xsl:variable name="pageHeight"&gt;
                &lt;xsl:value-of select="sum(preceding::*[@resolution]/@height)"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="previousPagesCount"&gt;
                &lt;xsl:value-of select="count(preceding::*[@resolution])+1"/&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="src"&gt;
                &lt;xsl:value-of select="concat('converted_pdf_link_PLACEHOLDER',$previousPagesCount,'.png')"/&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;img src="&lt;/xsl:text&gt;
            &lt;xsl:value-of select="$src"/&gt; &lt;xsl:text disable-output-escaping="yes"&gt;" style="&lt;/xsl:text&gt;position:absolute;top:&lt;xsl:value-of select="$pageHeight"/&gt;px;width:&lt;xsl:value-of select="@width"/&gt;px; height:&lt;xsl:value-of select="@height"/&gt;px; opacity:0.1; margin-left: 0px; margin-top: 0px;
            &lt;xsl:text disable-output-escaping="yes"&gt;" &amp;gt;&amp;lt;/img&amp;gt;&lt;/xsl:text&gt;
            &lt;xsl:apply-templates select="./wfocr:block"/&gt;
        &lt;/page&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template match="wfocr:block"&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="@blockType='Table'"&gt;
                &lt;table&gt;
                    &lt;tbody&gt;
                        &lt;xsl:apply-templates select="./wfocr:row"/&gt;
                    &lt;/tbody&gt;
                &lt;/table&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="@blockType='Text'"&gt;
                &lt;block&gt;
                    &lt;xsl:copy-of select="./@*"/&gt;
                    &lt;p&gt;
                        &lt;xsl:apply-templates select="./wfocr:text"/&gt;
                    &lt;/p&gt;
                &lt;/block&gt;
            &lt;/xsl:when&gt;
        &lt;/xsl:choose&gt;
        &lt;xsl:copy-of select="./separator"/&gt;
        &lt;xsl:copy-of select="./region"/&gt;
    &lt;/xsl:template&gt;
    &lt;xsl:template match="wfocr:row"&gt;

        &lt;tr&gt;
            &lt;xsl:apply-templates select="./wfocr:cell"/&gt;
        &lt;/tr&gt;
    &lt;/xsl:template&gt;
    &lt;xsl:template match="wfocr:cell"&gt;

        &lt;xsl:variable name="cellHeight"&gt;
            &lt;xsl:value-of select="@height"/&gt;
        &lt;/xsl:variable&gt;

        &lt;xsl:variable name="cellWidth"&gt;
            &lt;xsl:value-of select="@width"/&gt;
        &lt;/xsl:variable&gt;
        &lt;td&gt;
            &lt;xsl:attribute name="style"&gt;height:&lt;xsl:value-of select="$cellHeight"/&gt;px;width:&lt;xsl:value-of select="$cellWidth"/&gt;px;
            &lt;/xsl:attribute&gt;
            &lt;xsl:apply-templates select="./wfocr:text"/&gt;
        &lt;/td&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template match="wfocr:text"&gt;
        &lt;text&gt;
            &lt;xsl:copy-of select="./@*"/&gt;
            &lt;xsl:apply-templates select="./wfocr:par"/&gt;
        &lt;/text&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template match="wfocr:par"&gt;
        &lt;par&gt;
            &lt;xsl:copy-of select="./@*"/&gt;

            &lt;xsl:apply-templates select="./wfocr:line"/&gt;
        &lt;/par&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template match="wfocr:line"&gt;

        &lt;line&gt;
            &lt;xsl:copy-of select="./@*"/&gt;

            &lt;xsl:variable name="pageHeight"&gt;
                &lt;xsl:value-of select="number(sum(preceding::*[@resolution]/@height))"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="lineId"&gt;
                &lt;xsl:value-of select="generate-id(.)"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="lineTop"&gt;
                &lt;xsl:value-of select="number(@t)"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="lineBottom"&gt;
                &lt;xsl:value-of select="number(@b)"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="lineRight"&gt;
                &lt;xsl:value-of select="number(@r)"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="lineLeft"&gt;
                &lt;xsl:value-of select="number(@l)"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="lineFirstCharacterLeft"&gt;
                &lt;xsl:value-of select="number(descendant::wfocr:charParams[@l][1]/@l)"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="rotatedFontHeight"&gt;
                &lt;xsl:value-of select="number($lineRight - $lineLeft)"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="lineHeightOld"&gt;
                &lt;xsl:value-of select="number($lineBottom - $lineTop)"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="charBottoms"&gt;
                &lt;xsl:value-of select="number(sum(descendant::wfocr:charParams[string-length(normalize-space(text()))&gt;0]/@b))"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="charTops"&gt;
                &lt;xsl:value-of select="number(sum(descendant::wfocr:charParams[string-length(normalize-space(text()))&gt;0]/@t))"/&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="countElements"&gt;
                &lt;xsl:value-of select="number(count(descendant::wfocr:charParams[@b]))"/&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="middle"&gt;
                &lt;xsl:value-of select="ceiling($countElements div 2)"/&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="even"&gt;
                &lt;xsl:value-of select="not($countElements mod 2)"/&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="chosenElement"&gt;
                &lt;xsl:value-of select="count(descendant::wfocr:charParams[@b][@t]) div 10+1"/&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="lineHeightChar"&gt;
                &lt;xsl:for-each select="descendant::wfocr:charParams[@b][@t]"&gt;
                    &lt;xsl:sort data-type="number" select="string(number(./@b)-number(./@t))" order="descending"/&gt;
                    &lt;xsl:if test="position() = $middle"&gt;
                        &lt;xsl:value-of select="number(./@b)-number(./@t)"/&gt;
                    &lt;/xsl:if&gt;
                &lt;/xsl:for-each&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="totalCharHeight"&gt;
                &lt;xsl:value-of select="number($charBottoms)-number($charTops)"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="charCount"&gt;
                &lt;xsl:value-of select="number(count(descendant::wfocr:charParams[string-length(normalize-space(text()))&gt;0]))"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="lineHeightComputed"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="number($lineHeightOld) div 2 &amp;gt; number($lineHeightChar)"&gt;
                        &lt;xsl:value-of select="number($lineHeightChar)"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:value-of select="number($lineHeightOld)"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="lineHeight"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$isLineHeight"&gt;
                        &lt;xsl:value-of select="$lineHeightOld"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="number($lineHeightComputed) &amp;lt; number($minimalFontHeight)"&gt;
                                &lt;xsl:value-of select="number($minimalFontHeight)"/&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xsl:value-of select="number($lineHeightComputed)"/&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="fontHeight"&gt;
                &lt;xsl:value-of select="number($lineHeight)"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="rotatedLineHeight"&gt;
                &lt;xsl:value-of select="number($lineRight) - number($lineLeft)"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="lineRightValue"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="normalize-space(descendant::wfocr:charParams[not(@charConfidence)][1]/@r)!=NaN"&gt;
                        &lt;xsl:value-of select="number(descendant::wfocr:charParams[not(@charConfidence)][1]/@r)"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:value-of select="number($lineRight)"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="lineWidth"&gt;
                &lt;xsl:value-of select="number($lineRightValue) - number(@l)"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="orientation"&gt;
                &lt;xsl:value-of disable-output-escaping="yes" select="normalize-space(ancestor::wfocr:text[@orientation]/@orientation)"/&gt;
            &lt;/xsl:variable&gt;

            &lt;formatting&gt;
                &lt;xsl:copy-of select="./@*"/&gt;

                &lt;xsl:variable name="sumConfidence"&gt;
                    &lt;xsl:value-of select="number(sum(descendant::wfocr:charParams[@charConfidence]/@charConfidence))"/&gt;
                &lt;/xsl:variable&gt;
                &lt;xsl:variable name="numNodes"&gt;
                    &lt;xsl:value-of select="number(count(descendant::wfocr:charParams[@charConfidence]/@charConfidence))"/&gt;
                &lt;/xsl:variable&gt;
                &lt;xsl:variable name="charConfidence"&gt;
                    &lt;xsl:value-of select="number($sumConfidence div $numNodes)"/&gt;
                &lt;/xsl:variable&gt;
                &lt;xsl:variable name="firstCharInLine"&gt;
                    &lt;xsl:value-of select="normalize-space(descendant::wfocr:charParams[1]/text())"/&gt;
                &lt;/xsl:variable&gt;
                &lt;xsl:variable name="secondCharInLine"&gt;
                    &lt;xsl:value-of select="normalize-space(descendant::wfocr:charParams[2]/text())"/&gt;
                &lt;/xsl:variable&gt;
                &lt;xsl:variable name="preFirstSymbolLeft"&gt;
                    &lt;xsl:value-of select="descendant::wfocr:charParams[not(contains($numberSeparators,normalize-space(self::*/text()))) and
                    not(contains($dateSeparators,normalize-space(self::*/text()))) and
                    not(contains($numberChars,normalize-space(self::*/text()))) and
                    string-length(normalize-space(self::*/text())) &amp;gt; 0][1]/@l[1]"/&gt;
                &lt;/xsl:variable&gt;
                &lt;xsl:variable name="firstSymbolLeft"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="string-length($preFirstSymbolLeft) &amp;gt; 0"&gt;
                            &lt;xsl:value-of select="number($preFirstSymbolLeft)"/&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:value-of select="0"/&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:variable&gt;
                &lt;xsl:variable name="preFirstSpaceLeft"&gt;
                    &lt;xsl:value-of select="normalize-space(descendant::wfocr:charParams[not(self::*[@charConfidence])][1]/@l[1])"/&gt;
                &lt;/xsl:variable&gt;
                &lt;xsl:variable name="firstSpaceLeft"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="string-length($preFirstSpaceLeft) &amp;gt; 0"&gt;
                            &lt;xsl:value-of select="number($preFirstSpaceLeft)"/&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:value-of select="0"/&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:variable&gt;
                &lt;xsl:variable name="preFirstStopCharLeft"&gt;
                    &lt;xsl:value-of select="normalize-space(descendant::wfocr:charParams[contains($stopCharsFirstWordInLine,normalize-space(self::*/text()))][1]/@l[1])"/&gt;
                &lt;/xsl:variable&gt;
                &lt;xsl:variable name="firstStopCharLeft"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="string-length($preFirstStopCharLeft) &amp;gt; 0"&gt;
                            &lt;xsl:value-of select="$preFirstStopCharLeft"/&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:value-of select="0"/&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:variable&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="string-length(normalize-space($orientation))=0"&gt;
                        &lt;xsl:variable name="followingSpaceFirstWordInLine"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="string-length($preFirstSymbolLeft) = 0"&gt;
                                    &lt;xsl:value-of select="$lineRightValue"/&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="((string-length(normalize-space(descendant::wfocr:charParams[not(self::*[@charConfidence])][1]/@l[1])) &amp;gt; 0) and
                                (not(contains($numberChars, $firstCharInLine))))"&gt;
                                            &lt;xsl:value-of select="$firstSpaceLeft"/&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="contains($numberChars, $firstCharInLine) and ($firstSpaceLeft &amp;gt; $firstSymbolLeft)"&gt;
                                            &lt;xsl:value-of select="$firstSpaceLeft"/&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="contains($numberChars, $firstCharInLine) and ($firstSpaceLeft &amp;lt; $firstSymbolLeft)"&gt;
                                            &lt;xsl:value-of select="$firstSymbolLeft"/&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="$lineRightValue"/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:variable&gt;
                        &lt;xsl:variable name="followingStopCharFirstWordInLine"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="string-length($preFirstSymbolLeft) = 0"&gt;
                                    &lt;xsl:value-of select="$lineRightValue"/&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="(string-length(normalize-space(descendant::wfocr:charParams[contains($stopCharsFirstWordInLine,normalize-space(self::*/text()))][1]/@l[1])) &amp;gt; 0) and
                                (not(contains($numberChars, $firstCharInLine)))"&gt;
                                            &lt;xsl:value-of select="$firstStopCharLeft"/&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="contains($numberChars, $firstCharInLine) and ($firstStopCharLeft &amp;gt; $firstSymbolLeft)"&gt;
                                            &lt;xsl:value-of select="$firstStopCharLeft"/&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="contains($numberChars, $firstCharInLine) and ($firstStopCharLeft &amp;lt; $firstSymbolLeft)"&gt;
                                            &lt;xsl:value-of select="$firstSymbolLeft"/&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="$lineRightValue"/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:variable&gt;
                        &lt;xsl:variable name="rightFirstWordInLine"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="number($followingSpaceFirstWordInLine) &amp;lt; number($followingStopCharFirstWordInLine)"&gt;
                                    &lt;xsl:value-of select="number($followingSpaceFirstWordInLine)"/&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="number($followingStopCharFirstWordInLine)"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:variable&gt;
                        &lt;xsl:variable name="leftFirstWordInLine"&gt;
                            &lt;xsl:value-of select="$lineLeft"/&gt;
                        &lt;/xsl:variable&gt;

                        &lt;xsl:variable name="widthFirstWordInLine"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="string-length(normalize-space($rightFirstWordInLine))=0"&gt;
                                    &lt;xsl:value-of select="number($lineRight)-number($leftFirstWordInLine)"/&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="number($rightFirstWordInLine)-number($leftFirstWordInLine)"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:variable&gt;

                        &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;word t&lt;/xsl:text&gt;="&lt;xsl:value-of select="number($lineTop)+number($pageHeight)"/&gt;" b="&lt;xsl:value-of select="number($lineTop)+number($pageHeight)+number($lineHeight)"/&gt;" l="&lt;xsl:value-of select="number($lineFirstCharacterLeft)"/&gt;" r="&lt;xsl:value-of select="number($lineLeft)+number($lineWidth)"/&gt;"&lt;xsl:text disable-output-escaping="yes"&gt; charConfidence="&lt;/xsl:text&gt;
                        &lt;xsl:value-of select="number($charConfidence)"/&gt; &lt;xsl:text disable-output-escaping="yes"&gt;"&amp;gt;&amp;lt;div style&lt;/xsl:text&gt;= "top:&lt;xsl:value-of select="number($lineTop)+number($pageHeight)"/&gt;px;left:&lt;xsl:value-of select="number($lineFirstCharacterLeft)"/&gt;px; width:&lt;xsl:value-of select="number($widthFirstWordInLine)"/&gt;px; height:&lt;xsl:value-of select="number($lineHeight)"/&gt;px; font-size: &lt;xsl:value-of select="number($fontHeight)"/&gt;px;line-height:&lt;xsl:value-of select="number($fontHeight)"/&gt;px;"&lt;xsl:text disable-output-escaping="yes"&gt; class="n"&amp;gt;&lt;/xsl:text&gt;
                        &lt;xsl:for-each select="descendant::wfocr:charParams"&gt;
                            &lt;xsl:variable name="charValue"&gt;
                                &lt;xsl:value-of select="normalize-space(./text())"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="rightCharValueThatCanBeEmpty"&gt;
                                &lt;xsl:value-of select="normalize-space(./following::wfocr:charParams[1]/text()[1])"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="followingTagId"&gt;
                                &lt;xsl:value-of select="generate-id(./following::wfocr:*[1])"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="followingCharParamsTagId"&gt;
                                &lt;xsl:value-of select="generate-id(./following::wfocr:charParams[1])"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="precedingTagId"&gt;
                                &lt;xsl:value-of select="generate-id(./preceding::wfocr:*[1])"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="precedingCharParamsTagId"&gt;
                                &lt;xsl:value-of select="generate-id(./preceding-sibling::wfocr:charParams[1])"/&gt;
                            &lt;/xsl:variable&gt;

                            &lt;xsl:variable name="isLastCharInLine"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="($followingTagId &amp;lt; $followingCharParamsTagId) or ($followingTagId &amp;gt; $followingCharParamsTagId)"&gt;
                                        &lt;xsl:value-of select="true()"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="false()"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="isFirstCharInLineNew"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="($precedingTagId &amp;lt; $precedingCharParamsTagId) or ($precedingTagId &amp;gt; $precedingCharParamsTagId)"&gt;
                                        &lt;xsl:value-of select="true()"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="false()"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="rightCharValue"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="string-length($rightCharValueThatCanBeEmpty)&gt;0"&gt;
                                        &lt;xsl:value-of select="$rightCharValueThatCanBeEmpty"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="'1'"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="followingNumberChar"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="string-length(normalize-space(following::wfocr:charParams[not(self::*[@charConfidence])][contains($numberChars,normalize-space(self::*/text()))][1]/@l[1])) &amp;gt; 0"&gt;
                                        &lt;xsl:value-of select="number(normalize-space(following::wfocr:charParams[not(self::*[@charConfidence])][contains($numberChars,normalize-space(self::*/text()))][1]/@l[1]))"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="$lineRightValue"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="followingLetter"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="string-length(normalize-space(following::wfocr:charParams[not(self::*[@charConfidence])][not(contains($numberChars,normalize-space(self::*/text()))) and not(contains($stopChars,normalize-space(self::*/text())))][1]/@l[1])) &amp;gt; 0"&gt;
                                        &lt;xsl:value-of select="number(normalize-space(following::wfocr:charParams[not(self::*[@charConfidence])][not(contains($numberChars,normalize-space(self::*/text()))) and not(contains($stopChars,normalize-space(self::*/text())))][1]/@l[1]))"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="$lineRightValue"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="isNumberChar"&gt;
                                &lt;xsl:value-of select="contains($numberChars,$charValue)"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="isLetterChar"&gt;
                                &lt;xsl:value-of select="not(contains($numberChars,$charValue)) and not(contains($stopChars,$charValue))"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="isRightNumberChar"&gt;
                                &lt;xsl:choose&gt;
                                &lt;xsl:when test="string-length($rightCharValueThatCanBeEmpty)&gt;0"&gt;
                                &lt;xsl:value-of select="contains($numberChars,$rightCharValue)"/&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="false()"/&gt;
                                &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="isRightLetterChar"&gt;
                                &lt;xsl:value-of select="not(contains($numberChars,$rightCharValue)) and not(contains($stopChars,$rightCharValue))"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="followingNumberLetterFirst"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$isNumberChar"&gt;
                                        &lt;xsl:value-of select="$followingLetter"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$isLetterChar"&gt;
                                        &lt;xsl:value-of select="$followingNumberChar"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="$lineRightValue"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;


                            &lt;xsl:variable name="preFstSymbolLeft"&gt;
                                &lt;xsl:value-of select="following::wfocr:charParams[not(contains($numberSeparators,normalize-space(self::*/text()))) and
                    (not(contains($numberChars, $charValue)) or (contains($numberChars, $charValue) and  not(contains($dateSeparators,normalize-space(self::*/text()))))) and
                    not(contains($numberChars,normalize-space(self::*/text()))) and
                    string-length(normalize-space(self::*/text())) &amp;gt; 0][1]/@l[1]"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="fstSymbolLeft"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="string-length($preFstSymbolLeft) &amp;gt; 0"&gt;
                                        &lt;xsl:choose&gt;
                                            &lt;xsl:when test="number($preFstSymbolLeft) &amp;gt; number(./@l[1])"&gt;
                                                &lt;xsl:value-of select="number($preFstSymbolLeft)"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:otherwise&gt;
                                                &lt;xsl:value-of select="$lineRightValue"/&gt;
                                            &lt;/xsl:otherwise&gt;
                                        &lt;/xsl:choose&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="0"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="preFstSpaceLeft"&gt;
                                &lt;xsl:value-of select="normalize-space(following::wfocr:charParams[not(self::*[@charConfidence])][1]/@l[1])"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="fstSpaceLeft"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="string-length($preFstSpaceLeft) &amp;gt; 0"&gt;
                                        &lt;xsl:choose&gt;
                                            &lt;xsl:when test="number($preFstSpaceLeft) &amp;gt; number(./@l[1])"&gt;
                                                &lt;xsl:choose&gt;
                                                    &lt;xsl:when test="number($preFstSpaceLeft) &amp;lt; number($fstSymbolLeft)"&gt;
                                                        &lt;xsl:value-of select="number($fstSymbolLeft)"/&gt;
                                                    &lt;/xsl:when&gt;
                                                    &lt;xsl:otherwise&gt;
                                                        &lt;xsl:value-of select="number($preFstSpaceLeft)"/&gt;
                                                    &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:otherwise&gt;
                                                &lt;xsl:value-of select="$lineRightValue"/&gt;
                                            &lt;/xsl:otherwise&gt;
                                        &lt;/xsl:choose&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="0"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="preFstStopCharLeft"&gt;
                                &lt;xsl:value-of select="normalize-space(following::wfocr:charParams[contains($stopCharsFirstWordInLine,normalize-space(self::*/text()))][1]/@l[1])"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="fstStopCharLeft"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="string-length($preFstStopCharLeft) &amp;gt; 0"&gt;
                                        &lt;xsl:choose&gt;
                                            &lt;xsl:when test="number($preFstStopCharLeft) &amp;gt; number(./@l[1])"&gt;
                                                &lt;xsl:value-of select="$preFstStopCharLeft"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:otherwise&gt;
                                                &lt;xsl:value-of select="$lineRightValue"/&gt;
                                            &lt;/xsl:otherwise&gt;
                                        &lt;/xsl:choose&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="0"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;


                            &lt;xsl:variable name="followingSpaceFst"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="string-length($preFstSymbolLeft) = 0"&gt;
                                        &lt;xsl:value-of select="$lineRightValue"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:choose&gt;
                                            &lt;xsl:when test="(string-length(normalize-space(following-sibling::*[not(self::*[@charConfidence])][1]/@l[1])) &amp;gt; 0) and (not(contains($numberChars, $rightCharValue))) and (not(contains($numberSeparators, $rightCharValue))) and (not(contains($dateSeparators, $rightCharValue)))"&gt;
                                                &lt;xsl:value-of select="number(normalize-space(following-sibling::*[not(self::*[@charConfidence])][1]/@l[1]))"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:when test="contains($numberChars, $rightCharValue) and ($fstSpaceLeft &amp;gt; $fstSymbolLeft)"&gt;
                                                &lt;xsl:value-of select="$fstSpaceLeft"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:when test="contains($numberChars, $rightCharValue) and ($fstSpaceLeft &amp;lt;= $fstSymbolLeft)"&gt;
                                                &lt;xsl:value-of select="$fstSymbolLeft"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:otherwise&gt;
                                                &lt;xsl:value-of select="$lineRightValue"/&gt;
                                            &lt;/xsl:otherwise&gt;
                                        &lt;/xsl:choose&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="followingStopCharFst"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="string-length($preFstSymbolLeft) = 0"&gt;
                                        &lt;xsl:value-of select="$lineRightValue"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:choose&gt;
                                            &lt;xsl:when test="(string-length(normalize-space(following-sibling::wfocr:charParams[contains($stopChars,normalize-space(self::*/text()))][1]/@l[1])) &amp;gt; 0) and (not(contains($numberChars, $rightCharValue))) and (not(contains($numberSeparators, $rightCharValue))) and (not(contains($dateSeparators, $rightCharValue)))"&gt;
                                                &lt;xsl:value-of select="number(normalize-space(following-sibling::wfocr:charParams[contains($stopChars,normalize-space(self::*/text()))][1]/@l[1]))"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:when test="contains($numberChars, $rightCharValue) and ($fstSpaceLeft &amp;gt; $fstSymbolLeft)"&gt;
                                                &lt;xsl:value-of select="$fstSpaceLeft"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:when test="contains($numberChars, $rightCharValue) and ($fstSpaceLeft &amp;lt;= $fstSymbolLeft)"&gt;
                                                &lt;xsl:value-of select="$fstSymbolLeft"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:otherwise&gt;
                                                &lt;xsl:value-of select="$lineRightValue"/&gt;
                                            &lt;/xsl:otherwise&gt;
                                        &lt;/xsl:choose&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="followingSpaceFirst"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="(string-length(normalize-space(following::wfocr:charParams[not(self::*[@charConfidence])][1]/@l[1])) &amp;gt; 0) and (not(contains($numberChars, $rightCharValue))) "&gt;
                                        &lt;xsl:choose&gt;
                                            &lt;xsl:when test="not
                                            ((number(normalize-space(following::wfocr:charParams[not(self::*[@charConfidence])][1]/@l[1])) &amp;lt; $lineRightValue) and
                                            ((number(normalize-space(following::wfocr:charParams[not(self::*[@charConfidence])][1]/@t[1]))) &amp;gt; number(./@b)))"&gt;
                                                &lt;xsl:value-of select="number(normalize-space(following::wfocr:charParams[not(self::*[@charConfidence])][1]/@l[1]))"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:otherwise&gt;
                                                &lt;xsl:value-of select="$lineRightValue"/&gt;
                                            &lt;/xsl:otherwise&gt;
                                        &lt;/xsl:choose&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="$lineRightValue"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="followingStopCharFirst"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="(string-length(normalize-space(following-sibling::wfocr:charParams[contains($stopChars,normalize-space(self::*/text()))][not(contains($dateSeparators,normalize-space(self::*/text())))][1]/@l[1])) &amp;gt; 0)"&gt;
                                        &lt;xsl:value-of select="number(normalize-space(following-sibling::wfocr:charParams[contains($stopChars,normalize-space(self::*/text()))][not(contains($dateSeparators,normalize-space(self::*/text())))][1]/@l[1]))"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="$lineRightValue"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="right"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="(number($followingSpaceFst) &amp;lt;= number($followingStopCharFst)) and (number($followingSpaceFst) &amp;lt;= number($followingNumberLetterFirst))"&gt;
                                        &lt;xsl:value-of select="number($followingSpaceFst)"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="(number($followingStopCharFst) &amp;lt;= number($followingSpaceFst)) and (number($followingStopCharFst) &amp;lt;= number($followingNumberLetterFirst))"&gt;
                                        &lt;xsl:value-of select="$followingStopCharFst"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="(number($followingNumberLetterFirst) &amp;lt;= number($followingSpaceFst)) and (number($followingNumberLetterFirst) &amp;lt;= number($followingStopCharFst))"&gt;
                                        &lt;xsl:value-of select="$followingNumberLetterFirst"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="number($followingStopCharFst)"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="rightFst"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="number($followingSpaceFirst) &amp;lt; number($followingStopCharFst)"&gt;
                                        &lt;xsl:value-of select="number($followingSpaceFirst)"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="number($followingStopCharFst)"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="isTab"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="string-length(normalize-space(./@isTab)) &amp;gt; 0"&gt;
                                        &lt;xsl:value-of select="number(./@isTab)"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="0"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="left"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$isTab = 0"&gt;
                                        &lt;xsl:value-of select="number(./@r[1])"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="number(following-sibling::wfocr:charParams[not(self::*[@isTab])][1]/@r[1])"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;

                            &lt;xsl:variable name="width"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="string-length(normalize-space($right))=0"&gt;
                                        &lt;xsl:value-of select="number($lineRight)-number($left)"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="number($right)-number($left)"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="widthFst"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="string-length(normalize-space($rightFst))=0"&gt;
                                        &lt;xsl:choose&gt;
                                            &lt;xsl:when test="number($lineRight)-number($left) &amp;gt; 1"&gt;
                                                &lt;xsl:value-of select="number($lineRight)-number($left)"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:otherwise&gt;
                                                &lt;xsl:value-of select="$width"/&gt;
                                            &lt;/xsl:otherwise&gt;
                                        &lt;/xsl:choose&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:choose&gt;
                                            &lt;xsl:when test="number($rightFst)-number($left) &amp;gt; 0"&gt;
                                                &lt;xsl:value-of select="number($rightFst)-number($left)"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:otherwise&gt;
                                                &lt;xsl:value-of select="$width"/&gt;
                                            &lt;/xsl:otherwise&gt;
                                        &lt;/xsl:choose&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="isFirstCharInLine"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="number($lineFirstCharacterLeft) = number(./@l[1])"&gt;
                                        &lt;xsl:value-of select="1"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="0"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="leftCharValueThatCanBeEmpty"&gt;
                                &lt;xsl:value-of select="normalize-space(./preceding::wfocr:charParams[1]/text()[1])"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="leftCharValue"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="string-length($leftCharValueThatCanBeEmpty)&gt;0"&gt;
                                        &lt;xsl:value-of select="$leftCharValueThatCanBeEmpty"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="'1'"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="isLeftCharNumber"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="string-length($leftCharValueThatCanBeEmpty)&gt;0"&gt;
                                        &lt;xsl:value-of select="contains($numberChars,$leftCharValue)"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="false()"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="isLeftLetterChar"&gt;
                                &lt;xsl:value-of select="not(contains($numberChars,$leftCharValue)) and not(contains($stopChars,$leftCharValue))"/&gt;
                            &lt;/xsl:variable&gt;

                            &lt;xsl:variable name="charRight"&gt;
                                &lt;xsl:value-of select="./following-sibling::wfocr:charParams[1]/@l[1]"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="charLength"&gt;
                                &lt;xsl:value-of select="string-length(normalize-space($charValue))"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="textValue"&gt;
                                &lt;xsl:value-of select="normalize-space(./text())"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="followingSibling"&gt;
                                &lt;xsl:value-of select="normalize-space(following-sibling::wfocr:charParams[1]/text()[1])"/&gt;
                            &lt;/xsl:variable&gt;

                                                        &lt;xsl:choose&gt;
                                                            &lt;xsl:when test="((((not($charValue) or contains($stopChars, $charValue)) ) or
                                                        (contains($isLetterChar,'true') and contains($isLeftCharNumber, 'true') and contains($isFirstCharInLineNew, 'false')) or (contains($isNumberChar,'true') and contains($isLeftLetterChar,'true') and contains($isFirstCharInLineNew, 'false') ) or
                                                            (contains($numberChars, $leftCharValue) and not(contains($numberChars, $charValue)) and contains($numberChars, $rightCharValue) and not(contains($stopChars, $charValue)) and not($isFirstCharInLine='1'))) ) and
                                                        (($charLength &amp;gt; 0 and not(contains($numberSeparators, $charValue))) or
                                                        ($charLength=0 and not(contains($numberChars, $leftCharValue) and contains($numberChars, $rightCharValue))) or
                                                        (($charLength &amp;gt; 0) and not(contains($numberSeparators, $charValue) and contains($numberChars, $leftCharValue) and contains($numberChars, $rightCharValue)))) and
                                                        (($charLength &amp;gt; 0 and not(contains($dateSeparators, $charValue))) or
                                                        ($charLength=0 and not(contains($numberChars, $leftCharValue) and contains($numberChars, $rightCharValue))) or
                                                        (($charLength &amp;gt; 0) and not(contains($dateSeparators, $charValue) and contains($numberChars, $leftCharValue) and contains($numberChars, $rightCharValue))))"&gt;

                                                                &lt;xsl:variable name="followingSpace"&gt;
                                                                    &lt;xsl:choose&gt;
                                                                        &lt;xsl:when test="string-length(normalize-space(following-sibling::*[not(self::*[@charConfidence])][1]/@l[1])) &amp;gt; 0"&gt;
                                                                            &lt;xsl:value-of select="number(normalize-space(following-sibling::*[not(self::*[@charConfidence])][1]/@l[1]))"/&gt;
                                                                        &lt;/xsl:when&gt;
                                                                        &lt;xsl:otherwise&gt;
                                                                            &lt;xsl:value-of select="$lineRightValue"/&gt;
                                                                        &lt;/xsl:otherwise&gt;
                                                                    &lt;/xsl:choose&gt;
                                                                &lt;/xsl:variable&gt;
                                                                &lt;xsl:variable name="followingStopChar"&gt;
                                                                    &lt;xsl:choose&gt;
                                                                        &lt;xsl:when test="string-length(normalize-space(following-sibling::wfocr:charParams[contains($stopChars,normalize-space(self::*/text()))][1]/@l[1])) &amp;gt; 0"&gt;
                                                                            &lt;xsl:value-of select="number(normalize-space(following-sibling::wfocr:charParams[contains($stopChars,normalize-space(self::*/text()))][1]/@l[1]))"/&gt;
                                                                        &lt;/xsl:when&gt;
                                                                        &lt;xsl:otherwise&gt;
                                                                            &lt;xsl:value-of select="$lineRightValue"/&gt;
                                                                        &lt;/xsl:otherwise&gt;
                                                                    &lt;/xsl:choose&gt;
                                                                &lt;/xsl:variable&gt;
                                                                &lt;xsl:if test="number($width) &amp;gt; -1"&gt;
                                                                    &lt;xsl:text disable-output-escaping="yes"&gt;&amp;amp;nbsp;&amp;lt;/div&amp;gt;&amp;lt;/word&amp;gt;&lt;/xsl:text&gt;
                                                                    &lt;xsl:if test="(string-length(normalize-space($charValue)) &amp;gt; 0)"&gt;

                                                                        &lt;word&gt;
                                                                            &lt;xsl:attribute name="t"&gt;
                                                                                &lt;xsl:value-of select="number(./@t[1])"/&gt;
                                                                            &lt;/xsl:attribute&gt;
                                                                            &lt;xsl:attribute name="b"&gt;
                                                                                &lt;xsl:value-of select="number(./@b[1])"/&gt;
                                                                            &lt;/xsl:attribute&gt;
                                                                            &lt;xsl:attribute name="l"&gt;
                                                                                &lt;xsl:value-of select="number(./@l[1])"/&gt;
                                                                            &lt;/xsl:attribute&gt;
                                                                            &lt;xsl:attribute name="r"&gt;
                                                                                &lt;xsl:value-of select="number(./@r[1])"/&gt;
                                                                            &lt;/xsl:attribute&gt;
                                                                            &lt;xsl:attribute name="isTab"&gt;
                                                                                &lt;xsl:value-of select="'1'"/&gt;
                                                                            &lt;/xsl:attribute&gt;
                                                                            &lt;div&gt;
                                                                                &lt;xsl:attribute name="style"&gt;top:&lt;xsl:value-of select="number($lineTop)+number($pageHeight)"/&gt;px;left:&lt;xsl:value-of select="number(./@l[1])"/&gt;px; width:&lt;xsl:value-of select="number(./@r[1])-number(./@l[1])"/&gt;px; height:&lt;xsl:value-of select="number($lineHeight)"/&gt;px; font-size: &lt;xsl:value-of select="number($fontHeight)"/&gt;px;line-height:&lt;xsl:value-of select="number($fontHeight)"/&gt;px;&lt;/xsl:attribute&gt;
                                                                                &lt;xsl:attribute name="class"&gt;n&lt;/xsl:attribute&gt;
                                                                                &lt;xsl:value-of select="normalize-space(./text())"/&gt;
                                                                                &lt;xsl:text disable-output-escaping="yes"&gt;&amp;amp;nbsp;&lt;/xsl:text&gt;
                                                                            &lt;/div&gt;
                                                                        &lt;/word&gt;
                                                                    &lt;/xsl:if&gt;
                                                                    &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;word t&lt;/xsl:text&gt;="&lt;xsl:value-of select="number($lineTop)+number($pageHeight)"/&gt;" b="&lt;xsl:value-of select="number($lineTop)+number($pageHeight)+number($lineHeight)"/&gt;" r="&lt;xsl:value-of select="number(./@r)+number($width)"/&gt;" l="&lt;xsl:value-of select="$left"/&gt;"&lt;xsl:text disable-output-escaping="yes"&gt; charConfidence="&lt;/xsl:text&gt;
                                                                    &lt;xsl:value-of select="number($charConfidence)"/&gt; &lt;xsl:text disable-output-escaping="yes"&gt;"&amp;gt;&amp;lt;div style&lt;/xsl:text&gt;= "top:&lt;xsl:value-of select="number($lineTop+$pageHeight)"/&gt;px;left:&lt;xsl:value-of select="$left"/&gt;px; width:&lt;xsl:value-of select="number($widthFst)"/&gt;px; height:&lt;xsl:value-of select="number($lineHeight)"/&gt;px; font-size: &lt;xsl:value-of select="number($fontHeight)"/&gt;px;line-height:&lt;xsl:value-of select="number($fontHeight)"/&gt;px;" &lt;xsl:text disable-output-escaping="yes"&gt; class="n"&amp;gt;&lt;/xsl:text&gt;
                                                                &lt;/xsl:if&gt;
                                                            &lt;/xsl:when&gt;
                                                            &lt;xsl:otherwise&gt;
                                                                &lt;xsl:value-of select="normalize-space(./text())"/&gt;
                                                            &lt;/xsl:otherwise&gt;
                                                        &lt;/xsl:choose&gt;
                                                        &lt;!--                            &lt;/xsl:if&gt;--&gt;
                        &lt;/xsl:for-each&gt;
                        &lt;xsl:text disable-output-escaping="yes"&gt;&amp;amp;nbsp;&amp;lt;/div&amp;gt;&amp;lt;/word&amp;gt;&lt;/xsl:text&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$orientation='RotatedClockwise'"&gt;
                        &lt;xsl:variable name="startBottom"&gt;
                            &lt;xsl:value-of select="number(descendant::*[not(self::*[@charConfidence])][1]/@t)"/&gt;
                        &lt;/xsl:variable&gt;
                        &lt;xsl:variable name="startTop"&gt;
                            &lt;xsl:value-of select="number(descendant::*[1]/@t)"/&gt;
                        &lt;/xsl:variable&gt;
                        &lt;xsl:variable name="startHeight"&gt;
                            &lt;xsl:value-of select="number($startBottom)-number($startTop)"/&gt;
                        &lt;/xsl:variable&gt;
                        &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;word t&lt;/xsl:text&gt;="&lt;xsl:value-of select="number($startTop)+number($pageHeight)"/&gt;" b="&lt;xsl:value-of select="number($pageHeight)+number($startBottom)"/&gt;" l="&lt;xsl:value-of select="number($lineLeft)"/&gt;" r="&lt;xsl:value-of select="number($lineLeft)+number($lineWidth)"/&gt;"&lt;xsl:text disable-output-escaping="yes"&gt; charConfidence="&lt;/xsl:text&gt;
                        &lt;xsl:value-of select="number($charConfidence)"/&gt; &lt;xsl:text disable-output-escaping="yes"&gt;"&amp;gt;&amp;lt;div style&lt;/xsl:text&gt;= "top:&lt;xsl:value-of select="number($startTop)+number($pageHeight)"/&gt;px;left:&lt;xsl:value-of select="number($lineLeft)"/&gt;px; width:&lt;xsl:value-of select="number($lineWidth)"/&gt;px; height:&lt;xsl:value-of select="number($startHeight)"/&gt;px; font-size: &lt;xsl:value-of select="number($rotatedFontHeight)"/&gt;px;line-height:&lt;xsl:value-of select="number($rotatedFontHeight)"/&gt;px;"&lt;xsl:text disable-output-escaping="yes"&gt;class="rc"&amp;gt;&lt;/xsl:text&gt;
                        &lt;xsl:for-each select="descendant::wfocr:charParams"&gt;
                            &lt;xsl:variable name="charValue"&gt;
                                &lt;xsl:value-of select="normalize-space(./text())"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="not($charValue) or contains($stopChars, $charValue)"&gt;

                                    &lt;xsl:variable name="followingSpace"&gt;
                                        &lt;xsl:value-of select="number(normalize-space(following-sibling::*[not(self::wfocr:charParams[@charConfidence])][1]/@b))"/&gt;
                                    &lt;/xsl:variable&gt;
                                    &lt;xsl:variable name="followingStopChar"&gt;
                                        &lt;xsl:value-of select="number(normalize-space(following-sibling::*[contains($stopChars,normalize-space(self::wfocr:charParams/text()))][1]/@b))"/&gt;
                                    &lt;/xsl:variable&gt;

                                    &lt;xsl:variable name="top"&gt;
                                        &lt;xsl:value-of select="number(./@b)"/&gt;
                                    &lt;/xsl:variable&gt;
                                    &lt;xsl:variable name="bottom"&gt;
                                        &lt;xsl:choose&gt;
                                            &lt;xsl:when test="(string-length($followingSpace)=0) and (string-length($followingStopChar)=0) and string-length(normalize-space(following-sibling::wfocr:charParams[last()]/@b))=0"&gt;
                                                &lt;xsl:value-of select="$lineBottom"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:when test="(string-length($followingSpace)=0) and (string-length($followingStopChar)=0)"&gt;
                                                &lt;xsl:value-of select="normalize-space(following-sibling::wfocr:charParams[last()]/@b)"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:when test="(string-length($followingStopChar)=0)"&gt;
                                                &lt;xsl:value-of select="$followingSpace"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:when test="(string-length($followingSpace)=0)"&gt;
                                                &lt;xsl:value-of select="$followingStopChar"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:when test="number($followingSpace) &amp;lt; number($followingStopChar)"&gt;
                                                &lt;xsl:value-of select="$followingSpace"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:when test="number($followingSpace) &amp;gt; number($followingStopChar)"&gt;
                                                &lt;xsl:value-of select="$followingStopChar"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:otherwise&gt;
                                                &lt;xsl:value-of select="$lineBottom"/&gt;
                                            &lt;/xsl:otherwise&gt;
                                        &lt;/xsl:choose&gt;
                                    &lt;/xsl:variable&gt;

                                    &lt;xsl:variable name="height"&gt;
                                        &lt;xsl:value-of select="number($bottom)-number($top)"/&gt;
                                    &lt;/xsl:variable&gt;
                                    &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;/div&amp;gt;&amp;lt;/word&amp;gt;&lt;/xsl:text&gt;

                                    &lt;word&gt;
                                        &lt;xsl:attribute name="t"&gt;
                                            &lt;xsl:value-of select="number(./@t)"/&gt;
                                        &lt;/xsl:attribute&gt;
                                        &lt;xsl:attribute name="b"&gt;
                                            &lt;xsl:value-of select="number(./@b)"/&gt;
                                        &lt;/xsl:attribute&gt;
                                        &lt;xsl:attribute name="l"&gt;
                                            &lt;xsl:value-of select="number(./@l)"/&gt;
                                        &lt;/xsl:attribute&gt;
                                        &lt;xsl:attribute name="r"&gt;
                                            &lt;xsl:value-of select="number(./@r)"/&gt;
                                        &lt;/xsl:attribute&gt;
                                        &lt;xsl:attribute name="isTab"&gt;
                                            &lt;xsl:value-of select="'1'"/&gt;
                                        &lt;/xsl:attribute&gt;
                                        &lt;div&gt;
                                            &lt;xsl:attribute name="style"&gt;top:&lt;xsl:value-of select="number(./@t)+number($pageHeight)"/&gt;px;left:&lt;xsl:value-of select="number(./@l)"/&gt;px; width:&lt;xsl:value-of select="number(./@r)-number(./@l)"/&gt;px; height:&lt;xsl:value-of select="number(./@b)-number(./@t)"/&gt;px; font-size: &lt;xsl:value-of select="number($rotatedFontHeight)"/&gt;px;line-height:&lt;xsl:value-of select="number($rotatedFontHeight)"/&gt;px;
                                            &lt;/xsl:attribute&gt;
                                            &lt;xsl:attribute name="class"&gt;rc&lt;/xsl:attribute&gt;
                                            &lt;xsl:value-of select="$charValue"/&gt;
                                        &lt;/div&gt;
                                    &lt;/word&gt;

                                    &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;word t&lt;/xsl:text&gt;="&lt;xsl:value-of select="number($top)+number($pageHeight)"/&gt;" b="&lt;xsl:value-of select="number($top)+number($pageHeight)+number($height)"/&gt;" r="&lt;xsl:value-of select="number($lineLeft)+number($lineWidth)"/&gt;" l="&lt;xsl:value-of select="number($lineLeft)"/&gt;"&lt;xsl:text disable-output-escaping="yes"&gt; charConfidence="&lt;/xsl:text&gt;
                                    &lt;xsl:value-of select="number($charConfidence)"/&gt; &lt;xsl:text disable-output-escaping="yes"&gt;"&amp;gt;&amp;lt;div onload="divSize(this)" style&lt;/xsl:text&gt;= "top:&lt;xsl:value-of select="number($top)+number($pageHeight)"/&gt;px;left:&lt;xsl:value-of select="number($lineLeft)"/&gt;px; width:&lt;xsl:value-of select="number($lineWidth)"/&gt;px; height:&lt;xsl:value-of select="number($height)"/&gt;px; font-size: &lt;xsl:value-of select="number($rotatedFontHeight)"/&gt;px;line-height:&lt;xsl:value-of select="number($rotatedFontHeight)"/&gt;px;"
                                    &lt;xsl:text disable-output-escaping="yes"&gt; class="rc"&amp;gt;&lt;/xsl:text&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="normalize-space(./text())"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;

                        &lt;/xsl:for-each&gt;
                        &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;/div&amp;gt;&amp;lt;/word&amp;gt;&lt;/xsl:text&gt;

                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$orientation='RotatedCounterclockwise'"&gt;
                        &lt;xsl:variable name="startBottom"&gt;
                            &lt;xsl:value-of select="number(@b)"/&gt;
                        &lt;/xsl:variable&gt;
                        &lt;xsl:variable name="startTop"&gt;
                            &lt;xsl:value-of select="number(descendant::wfocr:charParams[1]/@b)"/&gt;
                        &lt;/xsl:variable&gt;

                        &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;word t&lt;/xsl:text&gt;="&lt;xsl:value-of select="number($startTop)+number($pageHeight)"/&gt;" b="&lt;xsl:value-of select="number($pageHeight)+number($startBottom)"/&gt;" l="&lt;xsl:value-of select="number($lineLeft)"/&gt;" r="&lt;xsl:value-of select="number($lineLeft)+number($lineWidth)"/&gt;"&lt;xsl:text disable-output-escaping="yes"&gt; charConfidence="&lt;/xsl:text&gt;
                        &lt;xsl:value-of select="number($charConfidence)"/&gt; &lt;xsl:text disable-output-escaping="yes"&gt;"&amp;gt;&amp;lt;div style&lt;/xsl:text&gt;= "top:&lt;xsl:value-of select="number($startTop)+number($pageHeight)"/&gt;px;left:&lt;xsl:value-of select="number($lineLeft)"/&gt;px; width:&lt;xsl:value-of select="number($lineWidth)"/&gt;px; height:&lt;xsl:value-of select="number($startBottom)-number($startTop)"/&gt;px; font-size: &lt;xsl:value-of select="number($rotatedFontHeight)"/&gt;px;line-height:&lt;xsl:value-of select="number($rotatedFontHeight)"/&gt;px;"
                        &lt;xsl:text disable-output-escaping="yes"&gt;class="rcc"&amp;gt;&lt;/xsl:text&gt;
                        &lt;xsl:for-each select="descendant::wfocr:charParams"&gt;
                            &lt;xsl:variable name="charValue"&gt;
                                &lt;xsl:value-of select="normalize-space(./text())"/&gt;
                            &lt;/xsl:variable&gt;

                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="not($charValue)or contains($stopChars, $charValue)"&gt;
                                    &lt;xsl:variable name="followingSpace"&gt;
                                        &lt;xsl:value-of select="number(normalize-space(following-sibling::*[not(self::*[@charConfidence])][1]/@t[1]))"/&gt;
                                    &lt;/xsl:variable&gt;
                                    &lt;xsl:variable name="followingStopChar"&gt;
                                        &lt;xsl:value-of select="number(normalize-space(following-sibling::*[contains($stopChars,normalize-space(self::*/text()))][1]/@t[1]))"/&gt;
                                    &lt;/xsl:variable&gt;

                                    &lt;xsl:variable name="top"&gt;
                                        &lt;xsl:choose&gt;
                                            &lt;xsl:when test="(string-length($followingSpace)=0) and (string-length($followingStopChar)=0) and (string-length(normalize-space(following-sibling::*[last()]/@t[1]))&gt;0)"&gt;
                                                &lt;xsl:value-of select="normalize-space(following-sibling::*[last()][@t]/@t[1])"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:when test="(string-length($followingStopChar)=0) and (string-length($followingSpace)&gt;0)"&gt;
                                                &lt;xsl:value-of select="$followingSpace"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:when test="(string-length($followingSpace)=0) and (string-length($followingStopChar)&gt;0)"&gt;
                                                &lt;xsl:value-of select="$followingStopChar"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:when test="(string-length($followingSpace)&gt;0) and ($followingSpace &amp;lt; $followingStopChar)"&gt;
                                                &lt;xsl:value-of select="$followingSpace"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:when test="string-length($followingStopChar)&gt;0"&gt;
                                                &lt;xsl:value-of select="$followingStopChar"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:otherwise&gt;
                                                &lt;xsl:value-of select="0"/&gt;
                                            &lt;/xsl:otherwise&gt;
                                        &lt;/xsl:choose&gt;
                                    &lt;/xsl:variable&gt;

                                    &lt;xsl:variable name="bottom"&gt;
                                        &lt;xsl:value-of select="number(./@b)"/&gt;
                                    &lt;/xsl:variable&gt;
                                    &lt;xsl:variable name="height"&gt;
                                        &lt;xsl:value-of select="number($bottom)-number($top)"/&gt;
                                    &lt;/xsl:variable&gt;
                                    &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;/div&amp;gt;&amp;lt;/word&amp;gt;&lt;/xsl:text&gt;

                                    &lt;word&gt;
                                        &lt;xsl:attribute name="t"&gt;
                                            &lt;xsl:value-of select="number(./@t)"/&gt;
                                        &lt;/xsl:attribute&gt;
                                        &lt;xsl:attribute name="b"&gt;
                                            &lt;xsl:value-of select="number(./@b)"/&gt;
                                        &lt;/xsl:attribute&gt;
                                        &lt;xsl:attribute name="l"&gt;
                                            &lt;xsl:value-of select="number(./@l)"/&gt;
                                        &lt;/xsl:attribute&gt;
                                        &lt;xsl:attribute name="r"&gt;
                                            &lt;xsl:value-of select="number(./@r)"/&gt;
                                        &lt;/xsl:attribute&gt;
                                        &lt;div&gt;
                                            &lt;xsl:attribute name="style"&gt;top:&lt;xsl:value-of select="number(./@t+$pageHeight)"/&gt;px;left:&lt;xsl:value-of select="number(./@l)"/&gt;px; width:&lt;xsl:value-of select="number(./@r)-number(./@l)"/&gt;px; height:&lt;xsl:value-of select="number(./@b)-number(./@t)"/&gt;px; font-size: &lt;xsl:value-of select="number($rotatedFontHeight)"/&gt;px;line-height:&lt;xsl:value-of select="number($rotatedFontHeight)"/&gt;px;
                                            &lt;/xsl:attribute&gt;
                                            &lt;xsl:attribute name="class"&gt;rcc&lt;/xsl:attribute&gt;
                                            &lt;xsl:value-of select="$charValue"/&gt;
                                        &lt;/div&gt;
                                    &lt;/word&gt;

                                    &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;word t&lt;/xsl:text&gt;="&lt;xsl:value-of select="number($top)+number($pageHeight)"/&gt;" b="&lt;xsl:value-of select="number($top)+number($pageHeight)+number($height)"/&gt;" r="&lt;xsl:value-of select="number($lineLeft)+number($lineWidth)"/&gt;" l="&lt;xsl:value-of select="number($lineLeft)"/&gt;"&lt;xsl:text disable-output-escaping="yes"&gt; charConfidence="&lt;/xsl:text&gt;
                                    &lt;xsl:value-of select="number($charConfidence)"/&gt; &lt;xsl:text disable-output-escaping="yes"&gt;"&amp;gt;&amp;lt;div style&lt;/xsl:text&gt;= "top:&lt;xsl:value-of select="number($top)+number($pageHeight)"/&gt;px;left:&lt;xsl:value-of select="number($lineLeft)"/&gt;px; width:&lt;xsl:value-of select="number($lineWidth)"/&gt;px; height:&lt;xsl:value-of select="number($height)"/&gt;px; font-size: &lt;xsl:value-of select="number($rotatedFontHeight)"/&gt;px;line-height:&lt;xsl:value-of select="number($rotatedFontHeight)"/&gt;px;"
                                    &lt;xsl:text disable-output-escaping="yes"&gt; class="rcc"&amp;gt;&lt;/xsl:text&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="normalize-space(./text())"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:for-each&gt;

                        &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;/div&amp;gt;&amp;lt;/word&amp;gt;&lt;/xsl:text&gt;
                    &lt;/xsl:when&gt;

                    &lt;xsl:otherwise&gt;
                        &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;word t&lt;/xsl:text&gt;="&lt;xsl:value-of select="number($lineTop)+number($pageHeight)"/&gt;" b="&lt;xsl:value-of select="number($lineTop)+number($pageHeight)+number($lineHeight)"/&gt;" l="&lt;xsl:value-of select="number($lineLeft)"/&gt;" r="&lt;xsl:value-of select="number($lineLeft)+number($lineWidth)"/&gt;"&lt;xsl:text disable-output-escaping="yes"&gt; charConfidence="&lt;/xsl:text&gt;
                        &lt;xsl:value-of select="$charConfidence"/&gt; &lt;xsl:text disable-output-escaping="yes"&gt;"&amp;gt;&amp;lt;div style&lt;/xsl:text&gt;= "top:&lt;xsl:value-of select="number($lineTop)+number($pageHeight)"/&gt;px;left:&lt;xsl:value-of select="number($lineLeft)"/&gt;px; width:&lt;xsl:value-of select="number($lineWidth)"/&gt;px; height:&lt;xsl:value-of select="number($lineHeight)"/&gt;px; font-size: &lt;xsl:value-of select="number($fontHeight)"/&gt;px;line-height:&lt;xsl:value-of select="number($fontHeight)"/&gt;px;"
                        &lt;xsl:text disable-output-escaping="yes"&gt;class="t"&amp;gt;&lt;/xsl:text&gt;
                        &lt;xsl:for-each select="descendant::wfocr:charParams"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="not(normalize-space(./text()))"&gt;
                                    &lt;xsl:variable name="right"&gt;
                                        &lt;xsl:value-of select="number(following-sibling::*[not(self::*[@charConfidence])][1]/@l[1])"/&gt;
                                    &lt;/xsl:variable&gt;
                                    &lt;xsl:variable name="left"&gt;
                                        &lt;xsl:value-of select="number(./@r)"/&gt;
                                    &lt;/xsl:variable&gt;
                                    &lt;xsl:variable name="width"&gt;
                                        &lt;xsl:choose&gt;
                                            &lt;xsl:when test="not(normalize-space($right))"&gt;
                                                &lt;xsl:value-of select="number($lineRight)-number($left)"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:otherwise&gt;
                                                &lt;xsl:value-of select="number($right)-number($left)"/&gt;
                                            &lt;/xsl:otherwise&gt;
                                        &lt;/xsl:choose&gt;
                                    &lt;/xsl:variable&gt;
                                    &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;/div&amp;gt;&amp;lt;/word&amp;gt;&lt;/xsl:text&gt; &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;word t&lt;/xsl:text&gt;="&lt;xsl:value-of select="number($lineTop)+number($pageHeight)"/&gt;" b="&lt;xsl:value-of select="number($lineTop)+number($pageHeight)+number($lineHeight)"/&gt;" r="&lt;xsl:value-of select="number(./@r[1])+number($width)"/&gt;" l="&lt;xsl:value-of select="number(./@r[1])"/&gt;"&lt;xsl:text disable-output-escaping="yes"&gt; charConfidence="&lt;/xsl:text&gt;
                                    &lt;xsl:value-of select="$charConfidence"/&gt; &lt;xsl:text disable-output-escaping="yes"&gt;"&amp;gt;&amp;lt;div style&lt;/xsl:text&gt;= "top:&lt;xsl:value-of select="number($lineTop)+number($pageHeight)"/&gt;px;left:&lt;xsl:value-of select="number(./@r[1])"/&gt;px; width:&lt;xsl:value-of select="number($width)"/&gt;px; height:&lt;xsl:value-of select="number($lineHeight)"/&gt;px; font-size: &lt;xsl:value-of select="number($fontHeight)"/&gt;px;line-height:&lt;xsl:value-of select="number($fontHeight)"/&gt;px;"
                                    &lt;xsl:text disable-output-escaping="yes"&gt;class="t"&amp;gt;&lt;/xsl:text&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="normalize-space(./text())"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:for-each&gt;
                        &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;/div&amp;gt;&amp;lt;/word&amp;gt;&lt;/xsl:text&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/formatting&gt;
        &lt;/line&gt;
    &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;

]]&gt;&lt;/template&gt;&lt;/stylesheet&gt;
		&lt;/xslt&gt;
	&lt;/var-def&gt;

	&lt;var-def name="htmlWordsDocument"&gt;
		&lt;script return="addImgTag(htmlWordsDocumentRaw.toString(), placeholder.toString(), imageLink.toString())"&gt;&lt;/script&gt;
	&lt;/var-def&gt;

	&lt;var-def name="ocr_tood_document_url"&gt;
        &lt;s3 bucket="${s3_bucket_name}"&gt;
            &lt;s3-put path="${bp_run_id}/${document_uuid}/${ocr_document_name}-tood.xml" acl="PublicRead" content-type="text/html; charset=utf-8" content-disposition="inline"&gt;
                &lt;var name="htmlWordsDocument" /&gt;
            &lt;/s3-put&gt;
        &lt;/s3&gt;
    &lt;/var-def&gt;
    
  	&lt;loop item="map" maxloops="1"&gt;
		&lt;list&gt;
			&lt;var name="ocr_result_list" /&gt;
		&lt;/list&gt;
		&lt;body&gt;
			&lt;script language="groovy"&gt;&lt;![CDATA[
				import com.google.gson.Gson;
				
				map.getWrappedObject().put("ocr_tood_document_url", ocr_tood_document_url.toString());
				map.getWrappedObject().put("ocr_tood_document_name", ocr_tood_document_url.toString().substring(ocr_tood_document_url.toString().lastIndexOf("/") + 1, ocr_tood_document_url.toString().lastIndexOf(".")));
				update_ocr_result_list.toList().add(new HashMap(map.getWrappedObject()));

				Gson gson = new Gson();
				String result_json = gson.toJson(update_ocr_result_list.toList());
				sys.defineVariable("ocr_json", result_json);
			]]&gt;&lt;/script&gt;
		&lt;/body&gt;
	&lt;/loop&gt;

    &lt;export include-original-data="true"&gt;
      	&lt;single-column name="ocr_json" value="${ocr_json}" /&gt;
    &lt;/export&gt;
&lt;/config&gt;</content>
                                    <description></description>
                                    <includedConfigs/>
                                    <inclusionCode>94f49144-6163-4cef-9379-26f9737a0fec</inclusionCode>
                                    <jsonParams>{"configXMLModified":"true"}</jsonParams>
                                    <machineWorkSetting>
                                        <category>
                                            <automation>false</automation>
                                            <description></description>
                                            <enabled>true</enabled>
                                            <executingType>MACHINE</executingType>
                                            <name>Other</name>
                                            <private>false</private>
                                            <publicId>dd92f240-144b-4fef-8476-4ec0acbc1105</publicId>
                                        </category>
                                        <contentType>BLANK</contentType>
                                        <description></description>
                                        <enabled>true</enabled>
                                        <name>Miscellaneous Tasks</name>
                                        <publicId>26e6e095-00bb-43fa-8c34-af0b18e71ac9</publicId>
                                        <version>
                                            <componentUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2018-07-09T12:40:36Z</lastModified>
                                            <versionUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</versionUuid>
                                        </version>
                                        <answers/>
                                        <machineWorkSettingType>BASIC</machineWorkSettingType>
                                        <template>
                                            <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                            <name>Blank</name>
                                            <origination>CREATED_MANUALLY</origination>
                                            <status>ACTIVE</status>
                                            <type>BASE_MACHINE</type>
                                            <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                            <version>
                                                <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                                <incrementalVersion>1.0</incrementalVersion>
                                                <lastInChain>true</lastInChain>
                                                <lastModified>2012-12-27T00:00:00Z</lastModified>
                                                <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                            </version>
                                        </template>
                                    </machineWorkSetting>
                                    <machineWorkSettingType>BASIC</machineWorkSettingType>
                                    <name>[TOOD] XSLT XML Enrichment with WORD and DIV tags</name>
                                    <machineConfigOptions/>
                                    <source>
                                        <availability></availability>
                                        <deleted>false</deleted>
                                        <description>100 local threads</description>
                                        <equallyDistributeLoad>false</equallyDistributeLoad>
                                        <name>100 local threads</name>
                                        <prioritizeEarlierRuns>true</prioritizeEarlierRuns>
                                        <proxySettings>
                                            <password></password>
                                            <server></server>
                                            <username></username>
                                            <validationEnabled>false</validationEnabled>
                                        </proxySettings>
                                        <threadCount>100</threadCount>
                                        <threadsPerNode>false</threadsPerNode>
                                        <timeZone>GMT</timeZone>
                                        <tps>0</tps>
                                        <url></url>
                                        <version>
                                            <componentUuid>5c9d7f49-7016-11e6-a889-22000b994623</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2010-01-01T00:00:00Z</lastModified>
                                            <versionUuid>bd5ce11b-7017-11e6-a889-22000b994623</versionUuid>
                                        </version>
                                    </source>
                                    <sourceType>MANUAL</sourceType>
                                    <template>
                                        <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                        <name>Blank</name>
                                        <origination>CREATED_MANUALLY</origination>
                                        <status>ACTIVE</status>
                                        <type>BASE_MACHINE</type>
                                        <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                        <version>
                                            <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2012-12-27T00:00:00Z</lastModified>
                                            <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                        </version>
                                    </template>
                                    <uuid>94f49144-6163-4cef-9379-26f9737a0fec</uuid>
                                    <version>
                                        <componentUuid>37562edc-07fc-4069-bd66-567758de3173</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2018-08-01T11:16:58Z</lastModified>
                                        <versionUuid>77081b0f-9a32-4284-b6db-efe8fc268644</versionUuid>
                                    </version>
                                </machineConfig>
                                <moderation>false</moderation>
                                <origination>CREATED_MANUALLY</origination>
                                <requiresData>true</requiresData>
                                <status>ACTIVE</status>
                                <streamComplexRunThreshold>1</streamComplexRunThreshold>
                                <streamTimeInterval>Immediately</streamTimeInterval>
                                <streamTimeIntervalValue>0</streamTimeIntervalValue>
                                <streamValueType>Tasks</streamValueType>
                                <title>[TOOD] XSLT XML Enrichment with WORD and DIV tags</title>
                                <type>SINGLE</type>
                                <uuid>183f85b1-2f07-4a01-baa7-7eef101da698</uuid>
                                <validWorkflow>false</validWorkflow>
                                <version>
                                    <componentUuid>75a7459e-a2ee-4869-937a-d31a9fe92c2b</componentUuid>
                                    <incrementalVersion>1.0</incrementalVersion>
                                    <lastInChain>true</lastInChain>
                                    <lastModified>2018-08-01T11:16:58Z</lastModified>
                                    <versionUuid>b6fa3947-1236-45dc-908f-e74255be4334</versionUuid>
                                </version>
                                <workSettingBase>false</workSettingBase>
                            </campaign>
                            <deleted>false</deleted>
                            <stepIndex>6</stepIndex>
                            <stepPosition>INTERMEDIATE</stepPosition>
                            <streamed>false</streamed>
                            <uuid>f2631fb2-8f2c-4665-9574-1d2b5451bdc3</uuid>
                        </campaignMap>
                        <campaignMap>
                            <blockSize>1</blockSize>
                            <businessRule>
                                <content># Rule.Definition={"moderationRule":false,"approveAllRule":false,"splitData":false,"splitRule":false,"splitRuleSuffix":"","joinRule":false,"joinRuleSuffix":"","streamingRule":false,"streamingRuleSuffix":"","namedRule":false,"namedRuleName":""}
package com.freedomoss.requester;

# list any import classes here.
import java.util.Map;
import java.util.ArrayList;
import com.freedomoss.objective.model.CompositeRuleContext;
import com.freedomoss.objective.model.CompositeRuleDataItemContext;
import org.slf4j.Logger;


# declare any global variables here
global CompositeRuleContext source
global Logger log
global Map params


rule "Rule context initialization"
auto-focus true
no-loop
agenda-group "initialization-group"
    when
        $ctx:CompositeRuleContext(initialized == false);
    then
        # insert processed facts into memory
        $ctx.updateWorkingMemory();
        # move to business rules
        kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("calculation").setFocus();
end

# RuleOutcome.Definition={"outcomeId":"TOOD","conditional":true,"reworkBySameWorker":false,"assignToSameWorker":false,"anableLogging":false,"sendRejectNotification":false,"assignToAnyWorker":false,"approveRelatedAssignments":false,"rejectRelatedAssignments":false,"renameAutomationAnswerItem":false,"conditions":[{"fieldName":"ocr_type","value":"tood","operator":"EQ"}],"customConditions":[]}
rule "1. Send records to 'TOOD' when ocr_type EQ 'tood'"
agenda-group "calculation"
dialect "mvel"
salience 100
    when
        $ctx:CompositeRuleContext(initialized == true);
        $item:CompositeRuleDataItemContext();
        eval($item.checkValue("ocr_type", "EQ", "tood"));

    then
        $ctx.sendResultTo("TOOD", $item);
end

# RuleOutcome.Definition={"outcomeId":"Standard","conditional":true,"reworkBySameWorker":false,"assignToSameWorker":false,"anableLogging":false,"sendRejectNotification":false,"assignToAnyWorker":false,"approveRelatedAssignments":false,"rejectRelatedAssignments":false,"renameAutomationAnswerItem":false,"conditions":[{"fieldName":"ocr_type","value":"standard","operator":"EQ"}],"customConditions":[]}
rule "2. Send records to 'Standard' when ocr_type EQ 'standard'"
agenda-group "calculation"
dialect "mvel"
salience 100
    when
        $ctx:CompositeRuleContext(initialized == true);
        $item:CompositeRuleDataItemContext();
        eval($item.checkValue("ocr_type", "EQ", "standard"));

    then
        $ctx.sendResultTo("Standard", $item);
end



rule "Send unprocessed result to unconditional outcome(s)"
agenda-group "calculation"
dialect "mvel"
salience 80
    when
        $ctx:CompositeRuleContext(initialized == true);
        $item:CompositeRuleDataItemContext();
    then
        $ctx.sendResultToUnconditionalOutcomes($item, true);
end</content>
                                <name>OCR Type</name>
                                <ruleType>WORKFLOW_RULE</ruleType>
                                <ruleTypeUI>Composite</ruleTypeUI>
                                <uuid>510e3e05-5ca4-4b81-85a2-1a350218d1ef</uuid>
                                <workflowRuleMode>SIMPLE</workflowRuleMode>
                            </businessRule>
                            <campaign>
                                <active>false</active>
                                <businessRules/>
                                <campaignMaps/>
                                <campaigns/>
                                <executingType>MACHINE</executingType>
                                <goldBucketBlockSize>0</goldBucketBlockSize>
                                <goldRatio>0</goldRatio>
                                <goldSource>Empty</goldSource>
                                <goldType>Percentage</goldType>
                                <machineConfig>
                                    <answers/>
                                    <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;!--
Step to make row processing for all OCR result documents with "xml" format from previous step, also put updated documents on S3 and update OCR JSON.

@Author: Alexey Shalak
@Author: Denis Uraev
@Version: 1.2
Workfusion 2018, RPA Express 2.0
--&gt;

&lt;config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config"
	scriptlang="groovy"&gt;

	&lt;script&gt;&lt;![CDATA[
		import groovy.json.JsonSlurper;

		List&lt;Map&gt; ocr_result_list = new JsonSlurper().parseText(ocr_json.toString());
		sys.defineVariable("ocr_result_list", ocr_result_list);

		List&lt;Map&gt; update_ocr_result_list = new ArrayList();
		sys.defineVariable("update_ocr_result_list", update_ocr_result_list);
	]]&gt;&lt;/script&gt;

	&lt;loop item="map"&gt;
		&lt;list&gt;
			&lt;var name="ocr_result_list" /&gt;
		&lt;/list&gt;
		&lt;body&gt;
			&lt;script&gt;&lt;![CDATA[
				sys.defineVariable("ocr_document_name", map.getWrappedObject().get("ocr_document_name").toString());
				sys.defineVariable("ocr_export_format", map.getWrappedObject().get("ocr_export_format").toString());
				sys.defineVariable("ocr_document_format", map.getWrappedObject().get("ocr_document_format").toString());
			]]&gt;&lt;/script&gt;
			&lt;case&gt;
				&lt;if condition='${ocr_document_format.toString().equals("xml")}'&gt;
					&lt;s3 bucket="${s3_bucket_name}"&gt;
						&lt;var-def name="xml_text"&gt;
							&lt;s3-get name="${bp_run_id}/${document_uuid}/${ocr_document_name}.${ocr_document_format}" /&gt;
						&lt;/var-def&gt;
					&lt;/s3&gt;

					&lt;var-def name="ocr_raw_processed_document"&gt;
						&lt;xslt&gt;
							&lt;xml&gt;
								&lt;var name="xml_text" /&gt;
							&lt;/xml&gt;                       
							&lt;stylesheet&gt;&lt;![CDATA[ &lt;?xml version="1.0" encoding="UTF-8"?&gt;
								&lt;xsl:stylesheet version="1.0"
								xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
								xmlns:wfocr="http://ocr.crowdcomputingsystems.com/xml/schema-v1.xml" xmlns:csl="http://www.w3.org/1999/XSL/Transform"&gt;

								&lt;xsl:template match="@*|node()"&gt;
								&lt;xsl:copy&gt;
								&lt;xsl:apply-templates select="@*|node()"/&gt;
								&lt;/xsl:copy&gt;
               					&lt;/xsl:template&gt;

								&lt;xsl:template match="wfocr:charRecVariants" /&gt;
								&lt;xsl:template match="wfocr:*/@serifProbability" /&gt;
								&lt;xsl:template match="wfocr:*/@wordFromDictionary" /&gt;
								&lt;xsl:template match="wfocr:*/@wordPenalty" /&gt;
								&lt;xsl:template match="wfocr:*/@wordNumeric" /&gt;
								&lt;xsl:template match="wfocr:*/@wordNormal" /&gt;
								&lt;xsl:template match="wfocr:*/@wordIdentifier" /&gt;
								&lt;/xsl:stylesheet&gt;
							]]&gt;&lt;/stylesheet&gt;
						&lt;/xslt&gt;
					&lt;/var-def&gt;

					&lt;var-def name="ocr_raw_processed_document_url"&gt;
						&lt;s3 bucket="${s3_bucket_name}"&gt;
							&lt;s3-put-public
								path="${bp_run_id}/${document_uuid}/${ocr_document_name}-raw_processed.${ocr_document_format}"
								content="${ocr_raw_processed_document}" content-type="text/html; charset=utf-8"
								content-disposition="inline" /&gt;
						&lt;/s3&gt;
					&lt;/var-def&gt;
                  
					&lt;script&gt;&lt;![CDATA[
						map.getWrappedObject().put("ocr_raw_processed_document_url", ocr_raw_processed_document_url.toString());
						map.getWrappedObject().put("ocr_raw_processed_document_name", ocr_raw_processed_document_url.toString().substring(ocr_raw_processed_document_url.toString().lastIndexOf("/") + 1, ocr_raw_processed_document_url.toString().lastIndexOf(".")));
					]]&gt;&lt;/script&gt;
				&lt;/if&gt;
			&lt;/case&gt;
			
			&lt;script&gt;&lt;![CDATA[
				update_ocr_result_list.toList().add(new HashMap(map.getWrappedObject()));
			]]&gt;&lt;/script&gt;
		&lt;/body&gt;
	&lt;/loop&gt;

	&lt;script&gt;&lt;![CDATA[
		import com.google.gson.Gson;

		Gson gson = new Gson();
		String result_json = gson.toJson(update_ocr_result_list.toList());
		sys.defineVariable("ocr_json", result_json);
	]]&gt;&lt;/script&gt;


	&lt;export include-original-data="true"&gt;
		&lt;single-column name="ocr_json" value="${ocr_json}" /&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                    <description></description>
                                    <includedConfigs/>
                                    <inclusionCode>39831f85-f2ef-4d02-9c5a-fa70fe6fc3ad</inclusionCode>
                                    <jsonParams>{"configXMLModified":"true"}</jsonParams>
                                    <machineWorkSetting>
                                        <category>
                                            <automation>false</automation>
                                            <description></description>
                                            <enabled>true</enabled>
                                            <executingType>MACHINE</executingType>
                                            <name>Data Transformation</name>
                                            <private>false</private>
                                            <publicId>0a266968-31f6-41f7-a7d8-09d7aeb4f581</publicId>
                                        </category>
                                        <contentType>NORMAL</contentType>
                                        <description>applies XSLT transformation to ocred text</description>
                                        <enabled>true</enabled>
                                        <name>XSLT node beauty</name>
                                        <publicId>086b2053-2c85-46e5-898c-16eb684baeaa</publicId>
                                        <version>
                                            <componentUuid>2555349d-5e72-4894-8b1a-a14d5fe45757</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2017-11-03T09:20:28Z</lastModified>
                                            <versionUuid>2dfd83e1-49f4-4521-86d4-c50506455776</versionUuid>
                                        </version>
                                        <answers/>
                                        <machineWorkSettingType>BASIC</machineWorkSettingType>
                                        <template>
                                            <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
  	
  	&lt;var-def name="resultXmlWithCharParams"&gt;
		&lt;xslt&gt;
			&lt;xml&gt;
				&lt;var name="document_xml" /&gt;
			&lt;/xml&gt;
			&lt;stylesheet&gt;&lt;![CDATA[ &lt;?xml version="1.0" encoding="UTF-8"?&gt;
			&lt;xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:wfocr="http://ocr.crowdcomputingsystems.com/xml/schema-v1.xml" xmlns:csl="http://www.w3.org/1999/XSL/Transform"&gt;

                &lt;xsl:template match="@*|node()"&gt;
                  &lt;xsl:copy&gt;
                    &lt;xsl:apply-templates select="@*|node()"/&gt;
                  &lt;/xsl:copy&gt;
                &lt;/xsl:template&gt;

                &lt;xsl:template match="wfocr:charRecVariants" /&gt;
                &lt;xsl:template match="wfocr:*/@serifProbability" /&gt;
                &lt;xsl:template match="wfocr:*/@wordFromDictionary" /&gt;
                &lt;xsl:template match="wfocr:*/@wordPenalty" /&gt;
                &lt;xsl:template match="wfocr:*/@wordNumeric" /&gt;
                &lt;xsl:template match="wfocr:*/@wordNormal" /&gt;
                &lt;xsl:template match="wfocr:*/@wordIdentifier" /&gt;
            &lt;/xsl:stylesheet&gt;				
			]]&gt;&lt;/stylesheet&gt;
		&lt;/xslt&gt;	
  	&lt;/var-def&gt;

	&lt;var-def name="documentXmlWithCharParamsLink"&gt;
		&lt;s3 bucket="public"&gt;
			&lt;s3-put-public path="${document_uuid}-with-char-params.xml"
				content="${resultXmlWithCharParams}" content-type="text/html; charset=utf-8"
				content-disposition="inline" /&gt;
		&lt;/s3&gt;
	&lt;/var-def&gt;
  	
	&lt;export include-original-data="true"&gt;
      &lt;single-column name="documentXmlWithCharParamsLink" value="${documentXmlWithCharParamsLink}"/&gt;
      &lt;single-column name="resultXmlWithCharParams" value="${resultXmlWithCharParams}"/&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                            <name>XSLT node ocr transformation1</name>
                                            <origination>CREATED_MANUALLY</origination>
                                            <status>ACTIVE</status>
                                            <type>BASE_MACHINE</type>
                                            <uuid>4498b39d-cdcf-4e5f-94ea-e2765f0ebde0</uuid>
                                            <version>
                                                <componentUuid>3d384ef2-8ca8-41f5-8c30-e08ce0e693b4</componentUuid>
                                                <incrementalVersion>1.0</incrementalVersion>
                                                <lastInChain>true</lastInChain>
                                                <lastModified>2017-11-03T09:20:28Z</lastModified>
                                                <versionUuid>3dcdf194-b57e-418b-9011-8308743202ea</versionUuid>
                                            </version>
                                        </template>
                                    </machineWorkSetting>
                                    <machineWorkSettingType>BASIC</machineWorkSettingType>
                                    <name>XSLT Cut off Raw OCR XML tags</name>
                                    <machineConfigOptions/>
                                    <sourceType>MANUAL</sourceType>
                                    <template>
                                        <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
  	
  	&lt;var-def name="resultXmlWithCharParams"&gt;
		&lt;xslt&gt;
			&lt;xml&gt;
				&lt;var name="document_xml" /&gt;
			&lt;/xml&gt;
			&lt;stylesheet&gt;&lt;![CDATA[ &lt;?xml version="1.0" encoding="UTF-8"?&gt;
			&lt;xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:wfocr="http://ocr.crowdcomputingsystems.com/xml/schema-v1.xml" xmlns:csl="http://www.w3.org/1999/XSL/Transform"&gt;

                &lt;xsl:template match="@*|node()"&gt;
                  &lt;xsl:copy&gt;
                    &lt;xsl:apply-templates select="@*|node()"/&gt;
                  &lt;/xsl:copy&gt;
                &lt;/xsl:template&gt;

                &lt;xsl:template match="wfocr:charRecVariants" /&gt;
                &lt;xsl:template match="wfocr:*/@serifProbability" /&gt;
                &lt;xsl:template match="wfocr:*/@wordFromDictionary" /&gt;
                &lt;xsl:template match="wfocr:*/@wordPenalty" /&gt;
                &lt;xsl:template match="wfocr:*/@wordNumeric" /&gt;
                &lt;xsl:template match="wfocr:*/@wordNormal" /&gt;
                &lt;xsl:template match="wfocr:*/@wordIdentifier" /&gt;
            &lt;/xsl:stylesheet&gt;				
			]]&gt;&lt;/stylesheet&gt;
		&lt;/xslt&gt;	
  	&lt;/var-def&gt;

	&lt;var-def name="documentXmlWithCharParamsLink"&gt;
		&lt;s3 bucket="public"&gt;
			&lt;s3-put-public path="${document_uuid}-with-char-params.xml"
				content="${resultXmlWithCharParams}" content-type="text/html; charset=utf-8"
				content-disposition="inline" /&gt;
		&lt;/s3&gt;
	&lt;/var-def&gt;
  	
	&lt;export include-original-data="true"&gt;
      &lt;single-column name="documentXmlWithCharParamsLink" value="${documentXmlWithCharParamsLink}"/&gt;
      &lt;single-column name="resultXmlWithCharParams" value="${resultXmlWithCharParams}"/&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                        <name>XSLT node ocr transformation1</name>
                                        <origination>CREATED_AUTOMATICALLY</origination>
                                        <status>ACTIVE</status>
                                        <type>MACHINE</type>
                                        <uuid>a1b6901a-8a09-4022-81ba-26de9d7713bd</uuid>
                                        <version>
                                            <componentUuid>77f1b33c-7eb6-44a8-9315-96d9ec07aab4</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2018-06-08T13:28:55Z</lastModified>
                                            <versionUuid>edd0b30d-16b8-4826-8222-1371d2c8422e</versionUuid>
                                        </version>
                                    </template>
                                    <uuid>39831f85-f2ef-4d02-9c5a-fa70fe6fc3ad</uuid>
                                    <version>
                                        <componentUuid>e929dfaf-f13f-4cc8-9c2f-12717dc17ad0</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2018-06-08T13:29:07Z</lastModified>
                                        <versionUuid>4aa2187a-0b16-4bee-82d2-0a7f5875b6c7</versionUuid>
                                    </version>
                                </machineConfig>
                                <moderation>false</moderation>
                                <origination>CREATED_AUTOMATICALLY</origination>
                                <requiresData>true</requiresData>
                                <status>ACTIVE</status>
                                <streamComplexRunThreshold>1</streamComplexRunThreshold>
                                <streamTimeInterval>Immediately</streamTimeInterval>
                                <streamTimeIntervalValue>0</streamTimeIntervalValue>
                                <streamValueType>Tasks</streamValueType>
                                <title>XSLT Cut off Raw OCR XML tags</title>
                                <type>SINGLE</type>
                                <uuid>40a908be-cbe2-41ea-800c-0922708b1e93</uuid>
                                <validWorkflow>false</validWorkflow>
                                <version>
                                    <componentUuid>9aabab8e-13cd-44be-960f-0e05dac7689c</componentUuid>
                                    <incrementalVersion>1.0</incrementalVersion>
                                    <lastInChain>true</lastInChain>
                                    <lastModified>2018-06-08T13:29:07Z</lastModified>
                                    <versionUuid>f4267b05-777b-4b98-9fac-4281e5aed285</versionUuid>
                                </version>
                                <workSettingBase>false</workSettingBase>
                            </campaign>
                            <deleted>false</deleted>
                            <stepIndex>7</stepIndex>
                            <stepPosition>INTERMEDIATE</stepPosition>
                            <streamed>false</streamed>
                            <uuid>dab9eae7-ba34-40d1-85c6-20eb8bf13d50</uuid>
                        </campaignMap>
                        <campaignMap>
                            <blockSize>1</blockSize>
                            <businessRule>
                                <content>#RuleContext.APPROVE_ALL_RULE</content>
                                <name>Approve All</name>
                                <ruleType>WORKFLOW_RULE</ruleType>
                                <ruleTypeUI>Composite</ruleTypeUI>
                                <uuid>4f3818e4-596a-4572-8f6e-e2f95971d5a7</uuid>
                                <workflowRuleMode>SIMPLE</workflowRuleMode>
                            </businessRule>
                            <campaign>
                                <active>false</active>
                                <businessRules/>
                                <campaignMaps/>
                                <campaigns/>
                                <executingType>MACHINE</executingType>
                                <goldBucketBlockSize>0</goldBucketBlockSize>
                                <goldRatio>0</goldRatio>
                                <goldSource>Empty</goldSource>
                                <goldType>Percentage</goldType>
                                <machineConfig>
                                    <answers/>
                                    <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;!--
Step to make request to the OCR api, with our input parameters , but before, get one OCR taskId for document and make valid OCR api URL.

@Author: Alexey Shalak
@Version: 1.0
Workfusion 2018, RPA Express 2.0
--&gt;

&lt;config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config"
        scriptlang="groovy"&gt;

    &lt;var-def name="ocr_url"&gt;
        &lt;var-global name="ocr_url"/&gt;
    &lt;/var-def&gt;
    &lt;try&gt;
        &lt;body&gt;
            &lt;secrets-vault-get alias="ocr-creds" /&gt;
        &lt;/body&gt;
        &lt;catch&gt;
        &lt;/catch&gt;
    &lt;/try&gt;

    &lt;script&gt;&lt;![CDATA[
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.methods.multipart.FilePart;
import org.apache.commons.httpclient.methods.multipart.StringPart;
import org.apache.commons.httpclient.methods.multipart.ByteArrayPartSource;
import org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity;
import org.apache.commons.httpclient.methods.multipart.Part;
import java.text.SimpleDateFormat;
import java.util.Base64;
import org.xml.sax.InputSource;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathFactory;

  String ocr_username = "";
  String ocr_password = "";
  if(sys.isVariableDefined("secureEntryMap")){
    Map entryMap = secureEntryMap.getWrappedObject();
    com.freedomoss.crowdcontrol.webharvest.web.dto.SecureEntryDTO obj = entryMap.get("ocr-creds");
    String ocr_username = obj.getKey().toString();
    String ocr_password = obj.getValue().toString();
  }

if(is_logging_enabled.toBoolean())
	log.warn("submitting with no authentication "+original_document_url.toString());
GetMethod getMethod = new GetMethod(original_document_url.toString());

        http.client.executeMethod(getMethod);
        byte[] buf = getMethod.getResponseBody();
 		getMethod.releaseConnection();
        PostMethod postMethod = new PostMethod(ocr_url.toString()+"/submitImage");
        if(!ocr_username.toString().isEmpty() &amp;&amp; !ocr_password.toString().isEmpty()){
                encoding = Base64.getEncoder().encodeToString((ocr_username.toString()+":"+ocr_password.toString()).getBytes());
                postMethod.setRequestHeader("Authorization","Basic " + encoding);
        }
        Part[] parts = new Part[1];
        parts[0] =  new FilePart("file", new ByteArrayPartSource("PDF", buf)) ;
        postMethod.setRequestEntity(new MultipartRequestEntity(parts, postMethod.getParams()));
        http.client.executeMethod(postMethod);
        statusCode = postMethod.getStatusCode();
        response = postMethod.getResponseBodyAsString();
		InputSource source1 = new InputSource(new StringReader(response));
		XPathFactory xpathFactory = XPathFactory.newInstance();
		XPath xpath = xpathFactory.newXPath();
		taskId = xpath.evaluate("//response/task/@id", source1);
		if(is_logging_enabled.toBoolean())
			log.info("task created "+taskId);


		//-------------------------------------------------------making processDocument url-------------------------------------------------------
		String url = ocr_url.toString() + "/processDocument?taskId=" + taskId.toString() + "&amp;exportFormat=" + no_cached_export_format.toString() + "&amp;language=" + document_language.toString() + "&amp;xml:writeRecognitionVariants=" + ocr_xml_char_recognition.toString() + "&amp;correctSkew=true&amp;correctOrientation=true&amp;allowedRegionTypes=" + allowed_region_types.toString() + "&amp;invertImage=" + invert_image.toString() + "&amp;discardColorImage=" + discard_color_image.toString() + "&amp;removeColorObjectsType=" + remove_color_objects_type.toString();
		StringBuilder process_document_url = new StringBuilder(url.toString());

		if( !custom_regions.toString().isEmpty()) {
			process_document_url.append("&amp;customRegions=" + custom_regions.toString());
		}

		if( !change_dpi.toString().isEmpty()) {
			process_document_url.append("&amp;changeDPI=" + change_dpi.toString());
		}

		if( !remove_color_objects.toString().isEmpty()) {
			process_document_url.append("&amp;removeColorObjects=" + remove_color_objects.toString());
		}

        getMethod = new GetMethod(process_document_url.toString());
        if(!ocr_username.toString().isEmpty() &amp;&amp; !ocr_password.toString().isEmpty()){
                encoding = Base64.getEncoder().encodeToString((ocr_username.toString()+":"+ocr_password.toString()).getBytes());
                getMethod.setRequestHeader("Authorization","Basic " + encoding);
        }
        http.client.executeMethod(getMethod);
		log.info("processing task"+taskId);
	]]&gt;&lt;/script&gt;

    &lt;export include-original-data="true"&gt;
        &lt;single-column name="ocr_task_id" value="${taskId}"/&gt;
    &lt;/export&gt;
&lt;/config&gt;</content>
                                    <description></description>
                                    <includedConfigs/>
                                    <inclusionCode>4affbfb0-1d88-4f08-b662-d97f9097a566</inclusionCode>
                                    <jsonParams>{"configXMLModified":"true"}</jsonParams>
                                    <machineWorkSetting>
                                        <category>
                                            <automation>false</automation>
                                            <description></description>
                                            <enabled>true</enabled>
                                            <executingType>MACHINE</executingType>
                                            <name>Other</name>
                                            <private>false</private>
                                            <publicId>dd92f240-144b-4fef-8476-4ec0acbc1105</publicId>
                                        </category>
                                        <contentType>BLANK</contentType>
                                        <description></description>
                                        <enabled>true</enabled>
                                        <name>Miscellaneous Tasks</name>
                                        <publicId>26e6e095-00bb-43fa-8c34-af0b18e71ac9</publicId>
                                        <version>
                                            <componentUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2018-07-09T12:40:36Z</lastModified>
                                            <versionUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</versionUuid>
                                        </version>
                                        <answers/>
                                        <machineWorkSettingType>BASIC</machineWorkSettingType>
                                        <template>
                                            <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                            <name>Blank</name>
                                            <origination>CREATED_MANUALLY</origination>
                                            <status>ACTIVE</status>
                                            <type>BASE_MACHINE</type>
                                            <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                            <version>
                                                <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                                <incrementalVersion>1.0</incrementalVersion>
                                                <lastInChain>true</lastInChain>
                                                <lastModified>2012-12-27T00:00:00Z</lastModified>
                                                <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                            </version>
                                        </template>
                                    </machineWorkSetting>
                                    <machineWorkSettingType>BASIC</machineWorkSettingType>
                                    <name>[Standard] OCR</name>
                                    <machineConfigOptions/>
                                    <sourceType>MANUAL</sourceType>
                                    <template>
                                        <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                        <name>Blank</name>
                                        <origination>CREATED_MANUALLY</origination>
                                        <status>ACTIVE</status>
                                        <type>BASE_MACHINE</type>
                                        <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                        <version>
                                            <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2012-12-27T00:00:00Z</lastModified>
                                            <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                        </version>
                                    </template>
                                    <uuid>4affbfb0-1d88-4f08-b662-d97f9097a566</uuid>
                                    <version>
                                        <componentUuid>e5f34cc0-fd08-444d-b6ab-08b708dbf12a</componentUuid>
                                        <incrementalVersion>1.10</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2018-08-13T11:41:07Z</lastModified>
                                        <versionUuid>303027d0-f1c4-4bb3-a352-db5c05bc32fe</versionUuid>
                                    </version>
                                </machineConfig>
                                <moderation>false</moderation>
                                <origination>CREATED_AUTOMATICALLY</origination>
                                <requiresData>true</requiresData>
                                <status>ACTIVE</status>
                                <streamComplexRunThreshold>1</streamComplexRunThreshold>
                                <streamTimeInterval>Immediately</streamTimeInterval>
                                <streamTimeIntervalValue>0</streamTimeIntervalValue>
                                <streamValueType>Tasks</streamValueType>
                                <title>[Standard] OCR</title>
                                <type>SINGLE</type>
                                <uuid>ed154b8a-fb08-4f4a-a605-597c0269ab5e</uuid>
                                <validWorkflow>false</validWorkflow>
                                <version>
                                    <componentUuid>b7743d5a-77a4-4c97-8250-ba124b9590cb</componentUuid>
                                    <incrementalVersion>1.10</incrementalVersion>
                                    <lastInChain>true</lastInChain>
                                    <lastModified>2018-08-13T11:41:07Z</lastModified>
                                    <versionUuid>8b051882-b26e-45d2-b9c5-10c9bb8ae5e6</versionUuid>
                                </version>
                                <workSettingBase>false</workSettingBase>
                            </campaign>
                            <deleted>false</deleted>
                            <stepIndex>8</stepIndex>
                            <stepPosition>INTERMEDIATE</stepPosition>
                            <streamed>false</streamed>
                            <uuid>fe8273b9-095b-4968-86d8-f47754d16193</uuid>
                        </campaignMap>
                        <campaignMap>
                            <blockSize>1</blockSize>
                            <businessRule>
                                <content>#RuleContext.APPROVE_ALL_RULE</content>
                                <name>Approve All</name>
                                <ruleType>WORKFLOW_RULE</ruleType>
                                <ruleTypeUI>Composite</ruleTypeUI>
                                <uuid>5c9059b1-dbb1-4659-8270-3d17f82cd99c</uuid>
                                <workflowRuleMode>SIMPLE</workflowRuleMode>
                            </businessRule>
                            <campaign>
                                <active>false</active>
                                <businessRules/>
                                <campaignMaps/>
                                <campaigns/>
                                <executingType>MACHINE</executingType>
                                <goldBucketBlockSize>0</goldBucketBlockSize>
                                <goldRatio>0</goldRatio>
                                <goldSource>Empty</goldSource>
                                <goldType>Percentage</goldType>
                                <machineConfig>
                                    <answers/>
                                    <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;!--
Step to save all new OCR result JSON members into cache datastore.

@Author: Alexey Shalak
@Author: Sergey Emelianov
@Version: 2.5
Workfusion 2018, RPA Express 2.0
--&gt;

&lt;config&gt;
    &lt;var-def name="key"&gt;
        &lt;template&gt;${document_hash}&lt;/template&gt;
    &lt;/var-def&gt;

    &lt;var-def name="skip_ocr_cache"&gt;
        &lt;template&gt;${skip_ocr_cache}&lt;/template&gt;
    &lt;/var-def&gt;
    &lt;case&gt;
    &lt;if condition='${skip_ocr_cache.toString().length() == 0 || !skip_ocr_cache.toString().equals("1") }'&gt;
    &lt;script language="groovy"&gt;&lt;![CDATA[
		import groovy.json.JsonSlurper;

		List&lt;Map&gt; ocr_result_list = new JsonSlurper().parseText(ocr_json.toString());
		sys.defineVariable("ocr_result_list", ocr_result_list);
	]]&gt;&lt;/script&gt;

    &lt;loop item="map"&gt;
        &lt;list&gt;
            &lt;var name="ocr_result_list" /&gt;
        &lt;/list&gt;
        &lt;body&gt;
            &lt;script&gt;&lt;![CDATA[
				Map originalData = new LinkedHashMap();
				originalData.put("key", key.toString());
				originalData.put("cached_at", javax.xml.bind.DatatypeConverter.printDateTime(Calendar.getInstance()));

				originalData.put("ocr_type", ocr_type.toString());
				originalData.put("export_format", map.getWrappedObject().get("ocr_export_format").toString());
				originalData.put("document_language", document_language.toString());
				originalData.put("ocr_xml_char_recognition", ocr_xml_char_recognition.toString());
				originalData.put("allowed_region_types", allowed_region_types.toString());
				originalData.put("custom_regions", custom_regions.toString());
				originalData.put("change_dpi", change_dpi.toString());
				originalData.put("invert_image", invert_image.toString());
				originalData.put("discard_color_image", discard_color_image.toString());
				originalData.put("remove_color_objects", remove_color_objects.toString());
				originalData.put("remove_color_objects_type", remove_color_objects_type.toString());

				originalData.put("ocr_json", new com.google.gson.Gson().toJson(map.getWrappedObject()));
			]]&gt;&lt;/script&gt;

            &lt;var-def name="originalDataJson"&gt;
                &lt;script return="new com.google.gson.Gson().toJson(originalData)" /&gt;
            &lt;/var-def&gt;

            &lt;insert-datastore datastore-name="${cache_datastore}"
                              json-value-map="${originalDataJson}" create="true" /&gt;

        &lt;/body&gt;
    &lt;/loop&gt;
    &lt;/if&gt;
    &lt;/case&gt;
    &lt;export include-original-data="true"&gt;
    &lt;/export&gt;
&lt;/config&gt;</content>
                                    <description></description>
                                    <includedConfigs/>
                                    <inclusionCode>9953fbf6-00bf-4214-9e32-de679cab86ab</inclusionCode>
                                    <jsonParams>{"configXMLModified":"true"}</jsonParams>
                                    <machineWorkSetting>
                                        <category>
                                            <automation>false</automation>
                                            <description></description>
                                            <enabled>true</enabled>
                                            <executingType>MACHINE</executingType>
                                            <name>Other</name>
                                            <private>false</private>
                                            <publicId>dd92f240-144b-4fef-8476-4ec0acbc1105</publicId>
                                        </category>
                                        <contentType>BLANK</contentType>
                                        <description></description>
                                        <enabled>true</enabled>
                                        <name>Miscellaneous Tasks</name>
                                        <publicId>26e6e095-00bb-43fa-8c34-af0b18e71ac9</publicId>
                                        <version>
                                            <componentUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2018-07-09T12:40:36Z</lastModified>
                                            <versionUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</versionUuid>
                                        </version>
                                        <answers/>
                                        <machineWorkSettingType>BASIC</machineWorkSettingType>
                                        <template>
                                            <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                            <name>Blank</name>
                                            <origination>CREATED_MANUALLY</origination>
                                            <status>ACTIVE</status>
                                            <type>BASE_MACHINE</type>
                                            <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                            <version>
                                                <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                                <incrementalVersion>1.0</incrementalVersion>
                                                <lastInChain>true</lastInChain>
                                                <lastModified>2012-12-27T00:00:00Z</lastModified>
                                                <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                            </version>
                                        </template>
                                    </machineWorkSetting>
                                    <machineWorkSettingType>BASIC</machineWorkSettingType>
                                    <name>Cache OCR results</name>
                                    <machineConfigOptions/>
                                    <sourceType>MANUAL</sourceType>
                                    <template>
                                        <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                        <name>Blank</name>
                                        <origination>CREATED_MANUALLY</origination>
                                        <status>ACTIVE</status>
                                        <type>BASE_MACHINE</type>
                                        <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                        <version>
                                            <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2012-12-27T00:00:00Z</lastModified>
                                            <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                        </version>
                                    </template>
                                    <uuid>9953fbf6-00bf-4214-9e32-de679cab86ab</uuid>
                                    <version>
                                        <componentUuid>fbc6e5af-3689-43e7-af9b-7c4e900ed34f</componentUuid>
                                        <incrementalVersion>1.4</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2018-08-07T12:21:44Z</lastModified>
                                        <versionUuid>f8dc512b-3909-4467-aaa6-b69f9c2ee0a0</versionUuid>
                                    </version>
                                </machineConfig>
                                <moderation>false</moderation>
                                <origination>CREATED_AUTOMATICALLY</origination>
                                <requiresData>true</requiresData>
                                <status>ACTIVE</status>
                                <streamComplexRunThreshold>1</streamComplexRunThreshold>
                                <streamTimeInterval>Immediately</streamTimeInterval>
                                <streamTimeIntervalValue>0</streamTimeIntervalValue>
                                <streamValueType>Tasks</streamValueType>
                                <title>Cache OCR results</title>
                                <type>SINGLE</type>
                                <uuid>410fb53c-97e3-4e61-a81e-e794c217a47b</uuid>
                                <validWorkflow>false</validWorkflow>
                                <version>
                                    <componentUuid>e87be71c-ad6a-44f9-b5ad-e0210a721997</componentUuid>
                                    <incrementalVersion>1.4</incrementalVersion>
                                    <lastInChain>true</lastInChain>
                                    <lastModified>2018-08-07T12:21:44Z</lastModified>
                                    <versionUuid>fbd58100-5398-4e76-9dc9-16c812fbf09e</versionUuid>
                                </version>
                                <workSettingBase>false</workSettingBase>
                            </campaign>
                            <deleted>false</deleted>
                            <stepIndex>9</stepIndex>
                            <stepPosition>INTERMEDIATE</stepPosition>
                            <streamed>false</streamed>
                            <uuid>b4d9b79a-59ba-4201-bc74-d8bd32dc1291</uuid>
                        </campaignMap>
                        <campaignMap>
                            <blockSize>1</blockSize>
                            <businessRule>
                                <content>#RuleContext.APPROVE_ALL_RULE</content>
                                <name>Approve All</name>
                                <ruleType>WORKFLOW_RULE</ruleType>
                                <ruleTypeUI>Composite</ruleTypeUI>
                                <uuid>cf499580-9ef4-418d-a5ee-57a99c4b4af2</uuid>
                                <workflowRuleMode>SIMPLE</workflowRuleMode>
                            </businessRule>
                            <campaign>
                                <active>false</active>
                                <businessRules/>
                                <campaignMaps/>
                                <campaigns/>
                                <executingType>MACHINE</executingType>
                                <goldBucketBlockSize>0</goldBucketBlockSize>
                                <goldRatio>0</goldRatio>
                                <goldSource>Empty</goldSource>
                                <goldType>Percentage</goldType>
                                <machineConfig>
                                    <answers/>
                                    <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;!--
Step to split document into PNG pages. Then we get json of pages urls for used it in "[TOOD} XSLT XML Enrichment with WORD and DIV tags" step.

@Author: Alexey Shalak
@Version: 2.2
Workfusion 2018, RPA Express 2.0
--&gt;

&lt;config charset="UTF-8"&gt;

  	&lt;required name="original_document_url"/&gt;
	
    &lt;var-def name="document_link"&gt;
     	 &lt;template&gt;${original_document_url.toString()}&lt;/template&gt;
    &lt;/var-def&gt; 
  
  	&lt;var-def name="convert_lib_path"&gt;
  		&lt;var-global name="convert_lib_path"/&gt;
  	&lt;/var-def&gt;
  
	&lt;var-def name="fileList"&gt;
		&lt;script return="convert(document_link.toString())"&gt;&lt;![CDATA[
			import java.io.BufferedReader;
			import java.io.File;
			import java.io.IOException;
			import java.io.InputStreamReader;
			import java.net.URL;
			import com.itextpdf.text.Image;

			import com.google.common.io.Files;
			import org.apache.commons.io.FileUtils;
			import org.apache.commons.io.FilenameUtils;
			import com.freedomoss.workfusion.utils.gson.GsonUtils;
			import org.webharvest.runtime.variables.ListVariable;
			import org.webharvest.runtime.variables.Variable;

			static Integer counter;
			static File outputFolder;
			static Integer size;
			static ListVariable lv;

			static int getSize(){
				return size;
			}

   			static Variable staticGetVariable(Object i){
				return lv.get((Integer)i);
			}

			static boolean getOS(){
				return ((String)System.getProperties().get("os.name")).contains("Windows");
			}

			boolean isWindows=getOS();


			static ListVariable convert(String documentLink) throws IOException, InterruptedException {
				File baseDir = Files.createTempDir();

				File inputFolder = new File(baseDir, "input");

				URL documentUrl = new URL(documentLink);
				String inputFileName = FilenameUtils.getName(documentUrl.getPath());

				if (inputFileName == null || inputFileName.isEmpty()) {
					inputFileName = "input.pdf";
				}

				File inputFile = new File(inputFolder, inputFileName);
				FileUtils.copyURLToFile(documentUrl, inputFile);

				outputFolder = new File(baseDir, "output");
				FileUtils.forceMkdir(outputFolder);

				File result = new File(outputFolder, "output.png");
				File resultTiff = new File(outputFolder, "output.tiff");

				if (isWindows){
				invoke(new ProcessBuilder(new String[] {
					"magick",
					"convert",
					"-density","288",
					inputFile.getAbsolutePath(),
					// "-resize", "25%",
					result.getAbsolutePath()}
				));
				} else {
				invoke(new ProcessBuilder(new String[] {
					convert_lib_path.toString(),
					"-density","288",
					inputFile.getAbsolutePath(),
					// "-resize", "25%",
					result.getAbsolutePath()}
				));
    			}

				List list=new ArrayList();
				counter=0;
				File created=new File(outputFolder, "output-"+counter.toString()+".png");
				while (created.exists()){
					counter++;
					list.add(created);
					created=new File(outputFolder, "output-"+counter.toString()+".png");
				}
				if (counter==0){
					created=new File(outputFolder, "output.png");
					if (created.exists()){
						File updated=new File(outputFolder, "output-0.png");
						created.renameTo(updated);
						counter++;
						list.add(updated);
					}
				}
				size=list.size();
				counter=0;
				lv=new ListVariable(list);
				return lv;
			}

			static void invoke(ProcessBuilder builder) throws IOException, InterruptedException {
				builder.redirectErrorStream(true);
				Process process = builder.start();
				if(is_logging_enabled.toBoolean()){
                  BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream()));
                  String line;
                  while ((line = in.readLine()) != null) {
                      log.info(line);
                  }
                  in.close();
				}
				int code = process.waitFor();
				if (code != 0) {
                    log.error("Failed to invoke process: " + builder.command() + ". Return code: " + code);
					throw new RuntimeException("Failed to invoke process: " + builder.command() + ". Return code: " + code);
				}
			}
		]]&gt;&lt;/script&gt;
	&lt;/var-def&gt;
	
	&lt;var-def name="numberOfPages"&gt;
		&lt;script return="getSize()" /&gt;
	&lt;/var-def&gt;

	&lt;loop item="fileJavaObject" index="i" filter="unique"&gt;
		&lt;list&gt;
			&lt;var name="fileList" /&gt;
		&lt;/list&gt;
		&lt;body&gt;
          &lt;case&gt;
            &lt;if condition='${is_logging_enabled.toBoolean()}'&gt;
              &lt;log level="info"&gt;
                  &lt;template&gt;saving file ${fileJavaObject} into ${s3_bucket_name} &lt;/template&gt;
              &lt;/log&gt;
            &lt;/if&gt;
          &lt;/case&gt;
			&lt;var-def name="key"&gt;
				&lt;script return="staticGetVariable(i.toInt()-1)"&gt;&lt;/script&gt;
			&lt;/var-def&gt;
			&lt;var-def name="content-${i}"&gt;
		        &lt;file path="${key}" type="binary"/&gt;
			&lt;/var-def&gt;
			&lt;var-def name="content"&gt;
				&lt;var name="content-${i}" /&gt;
			&lt;/var-def&gt;

			&lt;var-def name="converted_link-${i}"&gt;
        		&lt;s3  bucket="${s3_bucket_name}"&gt;
         			&lt;s3-put-public path="${bp_run_id}/${document_uuid}/page-${i}.png" content="${content}" content-type="image/png" content-disposition="inline"/&gt;
        		&lt;/s3&gt;
			&lt;/var-def&gt;
		&lt;/body&gt;
	&lt;/loop&gt;
	
	&lt;var-def name="jsonFilesUrls"&gt;
		&lt;json&gt;
			&lt;loop item="fileJavaObject" index="i" filter="unique"&gt;
				&lt;list&gt;
					&lt;var name="fileList" /&gt;
				&lt;/list&gt;
				&lt;body&gt;
					&lt;json-put key="fileList-${i}"&gt;
						&lt;var name="converted_link-${i}" /&gt;
					&lt;/json-put&gt;
				&lt;/body&gt;
			&lt;/loop&gt;
		&lt;/json&gt;
	&lt;/var-def&gt;
     
	&lt;export include-original-data="true"&gt;
		&lt;single-column name="pages" value="${numberOfPages}" /&gt;
		&lt;single-column name="json_file_urls" value="${jsonFilesUrls}" /&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                    <description></description>
                                    <includedConfigs/>
                                    <inclusionCode>6fb62561-cf34-4f85-b8e7-549baff334f3</inclusionCode>
                                    <jsonParams>{"configXMLModified":"true"}</jsonParams>
                                    <machineWorkSetting>
                                        <category>
                                            <automation>false</automation>
                                            <description></description>
                                            <enabled>true</enabled>
                                            <executingType>MACHINE</executingType>
                                            <name>Other</name>
                                            <private>false</private>
                                            <publicId>dd92f240-144b-4fef-8476-4ec0acbc1105</publicId>
                                        </category>
                                        <contentType>BLANK</contentType>
                                        <description></description>
                                        <enabled>true</enabled>
                                        <name>Miscellaneous Tasks</name>
                                        <publicId>26e6e095-00bb-43fa-8c34-af0b18e71ac9</publicId>
                                        <version>
                                            <componentUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2018-07-09T12:40:36Z</lastModified>
                                            <versionUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</versionUuid>
                                        </version>
                                        <answers/>
                                        <machineWorkSettingType>BASIC</machineWorkSettingType>
                                        <template>
                                            <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                            <name>Blank</name>
                                            <origination>CREATED_MANUALLY</origination>
                                            <status>ACTIVE</status>
                                            <type>BASE_MACHINE</type>
                                            <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                            <version>
                                                <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                                <incrementalVersion>1.0</incrementalVersion>
                                                <lastInChain>true</lastInChain>
                                                <lastModified>2012-12-27T00:00:00Z</lastModified>
                                                <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                            </version>
                                        </template>
                                    </machineWorkSetting>
                                    <machineWorkSettingType>BASIC</machineWorkSettingType>
                                    <name>[TOOD] Split document into PNG pages</name>
                                    <machineConfigOptions/>
                                    <sourceType>MANUAL</sourceType>
                                    <template>
                                        <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                        <name>Blank</name>
                                        <origination>CREATED_MANUALLY</origination>
                                        <status>ACTIVE</status>
                                        <type>BASE_MACHINE</type>
                                        <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                        <version>
                                            <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2012-12-27T00:00:00Z</lastModified>
                                            <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                        </version>
                                    </template>
                                    <uuid>6fb62561-cf34-4f85-b8e7-549baff334f3</uuid>
                                    <version>
                                        <componentUuid>6994caad-7870-4ba3-a219-7927539c1ca9</componentUuid>
                                        <incrementalVersion>1.4</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2018-08-13T11:41:07Z</lastModified>
                                        <versionUuid>6510628d-6511-4cec-a12a-51813dc32d20</versionUuid>
                                    </version>
                                </machineConfig>
                                <moderation>false</moderation>
                                <origination>CREATED_AUTOMATICALLY</origination>
                                <requiresData>true</requiresData>
                                <status>ACTIVE</status>
                                <streamComplexRunThreshold>1</streamComplexRunThreshold>
                                <streamTimeInterval>Immediately</streamTimeInterval>
                                <streamTimeIntervalValue>0</streamTimeIntervalValue>
                                <streamValueType>Tasks</streamValueType>
                                <title>[TOOD] Split document into PNG pages</title>
                                <type>SINGLE</type>
                                <uuid>5614de5a-60f8-4c14-b553-0c2c73366adf</uuid>
                                <validWorkflow>false</validWorkflow>
                                <version>
                                    <componentUuid>661a211a-16b8-4d0c-a4da-ad2fa1cf8db4</componentUuid>
                                    <incrementalVersion>1.4</incrementalVersion>
                                    <lastInChain>true</lastInChain>
                                    <lastModified>2018-08-13T11:41:07Z</lastModified>
                                    <versionUuid>770c690a-8b09-45c6-8733-ea91d4a06d64</versionUuid>
                                </version>
                                <workSettingBase>false</workSettingBase>
                            </campaign>
                            <deleted>false</deleted>
                            <stepIndex>10</stepIndex>
                            <stepPosition>INTERMEDIATE</stepPosition>
                            <streamed>false</streamed>
                            <uuid>235f01ab-5b86-459e-86a9-d1c2ecb8a756</uuid>
                        </campaignMap>
                        <campaignMap>
                            <blockSize>1</blockSize>
                            <businessRule>
                                <content># Rule.Definition={"moderationRule":false,"approveAllRule":false,"splitData":false,"splitRule":false,"splitRuleSuffix":"","joinRule":false,"joinRuleSuffix":"","streamingRule":false,"streamingRuleSuffix":"","namedRule":false,"namedRuleName":""}
package com.freedomoss.requester;

# list any import classes here.
import java.util.Map;
import java.util.ArrayList;
import com.freedomoss.objective.model.CompositeRuleContext;
import com.freedomoss.objective.model.CompositeRuleDataItemContext;
import org.slf4j.Logger;


# declare any global variables here
global CompositeRuleContext source
global Logger log
global Map params


rule "Rule context initialization"
auto-focus true
no-loop
agenda-group "initialization-group"
    when
        $ctx:CompositeRuleContext(initialized == false);
    then
        # insert processed facts into memory
        $ctx.updateWorkingMemory();
        # move to business rules
        kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("calculation").setFocus();
end

# RuleOutcome.Definition={"outcomeId":"OCR Failed","conditional":true,"reworkBySameWorker":false,"assignToSameWorker":false,"anableLogging":false,"sendRejectNotification":false,"assignToAnyWorker":false,"approveRelatedAssignments":false,"rejectRelatedAssignments":false,"renameAutomationAnswerItem":false,"conditions":[{"fieldName":"ocr_failed","value":"true","operator":"EQ"}],"customConditions":[]}
rule "1. Send records to 'OCR Failed' when ocr_failed EQ 'true'"
agenda-group "calculation"
dialect "mvel"
salience 100
    when
        $ctx:CompositeRuleContext(initialized == true);
        $item:CompositeRuleDataItemContext();
        eval($item.checkValue("ocr_failed", "EQ", "true"));

    then
        $ctx.sendResultTo("OCR Failed", $item);
end

# RuleOutcome.Definition={"outcomeId":"TOOD","conditional":true,"reworkBySameWorker":false,"assignToSameWorker":false,"anableLogging":false,"sendRejectNotification":false,"assignToAnyWorker":false,"approveRelatedAssignments":false,"rejectRelatedAssignments":false,"renameAutomationAnswerItem":false,"conditions":[{"fieldName":"ocr_failed","value":"false","operator":"EQ"},{"fieldName":"ocr_type","value":"tood","operator":"EQ"}],"customConditions":[]}
rule "2. Send records to 'TOOD' when ocr_failed EQ 'false' AND ocr_type EQ 'tood'"
agenda-group "calculation"
dialect "mvel"
salience 100
    when
        $ctx:CompositeRuleContext(initialized == true);
        $item:CompositeRuleDataItemContext();
        eval($item.checkValue("ocr_failed", "EQ", "false"));
        eval($item.checkValue("ocr_type", "EQ", "tood"));

    then
        $ctx.sendResultTo("TOOD", $item);
end

# RuleOutcome.Definition={"outcomeId":"Standard","conditional":true,"reworkBySameWorker":false,"assignToSameWorker":false,"anableLogging":false,"sendRejectNotification":false,"assignToAnyWorker":false,"approveRelatedAssignments":false,"rejectRelatedAssignments":false,"renameAutomationAnswerItem":false,"conditions":[{"fieldName":"ocr_failed","value":"false","operator":"EQ"},{"fieldName":"ocr_type","value":"standard","operator":"EQ"},{"fieldName":"xml_export_format_flag","value":"true","operator":"EQ"}],"customConditions":[]}
rule "3. Send records to 'Standard' when ocr_failed EQ 'false' AND ocr_type EQ 'standard' AND xml_export_format_flag EQ 'true'"
agenda-group "calculation"
dialect "mvel"
salience 100
    when
        $ctx:CompositeRuleContext(initialized == true);
        $item:CompositeRuleDataItemContext();
        eval($item.checkValue("ocr_failed", "EQ", "false"));
        eval($item.checkValue("ocr_type", "EQ", "standard"));
        eval($item.checkValue("xml_export_format_flag", "EQ", "true"));

    then
        $ctx.sendResultTo("Standard", $item);
end

# RuleOutcome.Definition={"outcomeId":"Standard (without xml export format)","conditional":true,"reworkBySameWorker":false,"assignToSameWorker":false,"anableLogging":false,"sendRejectNotification":false,"assignToAnyWorker":false,"approveRelatedAssignments":false,"rejectRelatedAssignments":false,"renameAutomationAnswerItem":false,"conditions":[{"fieldName":"ocr_failed","value":"false","operator":"EQ"},{"fieldName":"ocr_type","value":"standard","operator":"EQ"},{"fieldName":"xml_export_format_flag","value":"false","operator":"EQ"}],"customConditions":[]}
rule "4. Send records to 'Standard (without xml export format)' when ocr_failed EQ 'false' AND ocr_type EQ 'standard' AND xml_export_format_flag EQ 'false'"
agenda-group "calculation"
dialect "mvel"
salience 100
    when
        $ctx:CompositeRuleContext(initialized == true);
        $item:CompositeRuleDataItemContext();
        eval($item.checkValue("ocr_failed", "EQ", "false"));
        eval($item.checkValue("ocr_type", "EQ", "standard"));
        eval($item.checkValue("xml_export_format_flag", "EQ", "false"));

    then
        $ctx.sendResultTo("Standard (without xml export format)", $item);
end



rule "Send unprocessed result to unconditional outcome(s)"
agenda-group "calculation"
dialect "mvel"
salience 80
    when
        $ctx:CompositeRuleContext(initialized == true);
        $item:CompositeRuleDataItemContext();
    then
        $ctx.sendResultToUnconditionalOutcomes($item, true);
end</content>
                                <name>OCR Router</name>
                                <ruleType>WORKFLOW_RULE</ruleType>
                                <ruleTypeUI>Composite</ruleTypeUI>
                                <uuid>fc3d0e66-5faa-4b7e-9140-c1cd3809bff1</uuid>
                                <workflowRuleMode>SIMPLE</workflowRuleMode>
                            </businessRule>
                            <campaign>
                                <active>false</active>
                                <businessRules/>
                                <campaignMaps/>
                                <campaigns/>
                                <executingType>MACHINE</executingType>
                                <goldBucketBlockSize>0</goldBucketBlockSize>
                                <goldRatio>0</goldRatio>
                                <goldSource>Empty</goldSource>
                                <goldType>Percentage</goldType>
                                <machineConfig>
                                    <answers/>
                                    <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;!--
Step to get response from OCR api, and if OCR Process is "Completed", get OCRed document for each OCR export format parameter, put them on S3 and create OCR JSON with result OCR information.

@Author: Alexey Shalak
@Author: Denis Uraev
@Version: 1.1
Workfusion 2018, RPA Express 2.0
--&gt;

&lt;config charset="UTF-8"&gt;
  
  	&lt;var-def name="ocr_url"&gt;
  		&lt;var-global name="ocr_url"/&gt;
  	&lt;/var-def&gt;
  
    &lt;try&gt;
        &lt;body&gt;
            &lt;secrets-vault-get alias="ocr-creds" /&gt;
        &lt;/body&gt;
        &lt;catch&gt;
        &lt;/catch&gt;
    &lt;/try&gt;
  
	&lt;var-def name="ocr_failed"&gt;
		false
	&lt;/var-def&gt;

	&lt;var-def name="xml_export_format_flag"&gt;
		false
	&lt;/var-def&gt;

&lt;script&gt;&lt;![CDATA[
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.NameValuePair;
import java.util.Base64;

  String ocr_username = "";
  String ocr_password = "";
  if(sys.isVariableDefined("secureEntryMap")){
    Map entryMap = secureEntryMap.getWrappedObject();
    com.freedomoss.crowdcontrol.webharvest.web.dto.SecureEntryDTO obj = entryMap.get("ocr-creds");
    String ocr_username = obj.getKey().toString();
    String ocr_password = obj.getValue().toString();
  }


GetMethod getMethod = new GetMethod(ocr_url.toString()+"/getTaskStatus");
getMethod.setQueryString(new NameValuePair[] { 
    new NameValuePair("taskId", ocr_task_id.toString()) 
}); 
if(!ocr_username.toString().isEmpty() &amp;&amp; !ocr_password.toString().isEmpty()){
                encoding = Base64.getEncoder().encodeToString((ocr_username.toString()+":"+ocr_password.toString()).getBytes());
                getMethod.setRequestHeader("Authorization","Basic " + encoding);
}

        http.client.executeMethod(getMethod);
        String response = getMethod.getResponseBodyAsString();
 		getMethod.releaseConnection();
 		sys.defineVariable("statusResponse", response);
		]]&gt;&lt;/script&gt;
&lt;case&gt;
  &lt;if condition='${is_logging_enabled.toBoolean()}'&gt;
    &lt;log&gt;&lt;template&gt;${statusResponse}&lt;/template&gt;&lt;/log&gt;
  &lt;/if&gt;
&lt;/case&gt;
	&lt;var-def name="taskStatus"&gt;
      	&lt;xpath expression="string(//response/task/@status)"&gt;
			&lt;var name="statusResponse" /&gt;
		&lt;/xpath&gt;
	&lt;/var-def&gt;

	&lt;case&gt;
		&lt;if
			condition='${!"Completed".equals(taskStatus.toString()) @and !"ProcessingFailed".equals(taskStatus.toString())}'&gt;
			&lt;release time-in-seconds="30" /&gt;
			&lt;exit /&gt;
		&lt;/if&gt;

		&lt;if condition='${"ProcessingFailed".equals(taskStatus.toString())}'&gt;
			&lt;script&gt;&lt;![CDATA[
				sys.defineVariable("ocr_failed", true);
				sys.defineVariable("ocr_failed_response", statusResponse);
			]]&gt;&lt;/script&gt;
		&lt;/if&gt;

		&lt;if condition='${"Completed".equals(taskStatus.toString())}'&gt;

			&lt;script language="groovy"&gt;&lt;![CDATA[
				import groovy.json.JsonSlurper;

				List export_format_list = Arrays.asList(no_cached_export_format.toString().split(","));
				sys.defineVariable("export_format_list", export_format_list);

				List&lt;Map&gt; ocr_result_list = new ArrayList();
				sys.defineVariable("ocr_result_list", ocr_result_list);

				def original_document_url_object = new java.net.URI(original_document_url.toString())
				def original_document_name = original_document_url_object.getPath().tokenize('/').last().tokenize('.').first()
				
				sys.defineVariable("original_document_name", original_document_name);
			]]&gt;&lt;/script&gt;

			&lt;loop item="format"&gt;
				&lt;list&gt;
					&lt;var name="export_format_list" /&gt;
				&lt;/list&gt;
				&lt;body&gt;
					&lt;case&gt;
						&lt;if condition='${export_format_list.toList().indexOf(format) == 0}'&gt;
							&lt;var-def name="result_url"&gt;
								&lt;xpath expression="string(//response/task/@resultUrl)"&gt;
									&lt;var name="statusResponse" /&gt;
								&lt;/xpath&gt;
							&lt;/var-def&gt;
						&lt;/if&gt;

						&lt;if condition='${export_format_list.toList().indexOf(format) == 1}'&gt;
							&lt;var-def name="result_url"&gt;
								&lt;xpath expression="string(//response/task/@resultUrl2)"&gt;
									&lt;var name="statusResponse" /&gt;
								&lt;/xpath&gt;
							&lt;/var-def&gt;
						&lt;/if&gt;

						&lt;if condition='${export_format_list.toList().indexOf(format) == 2}'&gt;
							&lt;var-def name="result_url"&gt;
								&lt;xpath expression="string(//response/task/@resultUrl3)"&gt;
									&lt;var name="statusResponse" /&gt;
								&lt;/xpath&gt;
							&lt;/var-def&gt;
						&lt;/if&gt;
					&lt;/case&gt;

					&lt;case&gt;
						&lt;if condition='${export_format_list.toList().indexOf(format) @lt 3}'&gt;
							&lt;var-def name="result"&gt;
								&lt;http url="${result_url}" charset="UTF-8" /&gt;
							&lt;/var-def&gt;

							&lt;case&gt;
								&lt;if condition='${format.toString().equals("html")}'&gt;
									&lt;var-def name="path"&gt;
										&lt;template&gt;${bp_run_id}/${document_uuid}/${original_document_name}-html.html&lt;/template&gt;
									&lt;/var-def&gt;

									&lt;var-def name="type"&gt;
										&lt;template&gt;text/html&lt;/template&gt;
									&lt;/var-def&gt;
								&lt;/if&gt;
								&lt;if condition='${format.toString().equals("pdfSearchable")}'&gt;
									&lt;var-def name="path"&gt;
										&lt;template&gt;${bp_run_id}/${document_uuid}/${original_document_name}-pdf.pdf&lt;/template&gt;
									&lt;/var-def&gt;

									&lt;var-def name="type"&gt;
										&lt;template&gt;application/pdf&lt;/template&gt;
									&lt;/var-def&gt;
								&lt;/if&gt;
								&lt;if condition='${format.toString().equals("xml")}'&gt;
									&lt;var-def name="xml_export_format_flag"&gt;
										&lt;script return="flag"&gt;&lt;![CDATA[
											String flag = "true";
										]]&gt;&lt;/script&gt;
									&lt;/var-def&gt;

									&lt;var-def name="result"&gt;
										&lt;script return="res"&gt;&lt;![CDATA[
											// Removing BOM
											String res = result.toString().replaceAll("^\uFEFF", "");
										]]&gt;&lt;/script&gt;
									&lt;/var-def&gt;

									&lt;var-def name="path"&gt;
										&lt;template&gt;${bp_run_id}/${document_uuid}/${original_document_name}-xml.xml&lt;/template&gt;
									&lt;/var-def&gt;

									&lt;var-def name="type"&gt;
										&lt;template&gt;text/xml&lt;/template&gt;
									&lt;/var-def&gt;
								&lt;/if&gt;
								&lt;if condition='${format.toString().equals("xmlForCorrectedImage")}'&gt;
									&lt;var-def name="xml_export_format_flag"&gt;
										&lt;script return="flag"&gt;&lt;![CDATA[
											String flag = "true";
										]]&gt;&lt;/script&gt;
									&lt;/var-def&gt;

									&lt;var-def name="result"&gt;
										&lt;script return="res"&gt;&lt;![CDATA[
											// Removing BOM
											String res = result.toString().replaceAll("^\uFEFF", "");
										]]&gt;&lt;/script&gt;
									&lt;/var-def&gt;

									&lt;var-def name="path"&gt;
										&lt;template&gt;${bp_run_id}/${document_uuid}/${original_document_name}-xmlForCorrectedImage.xml&lt;/template&gt;
									&lt;/var-def&gt;

									&lt;var-def name="type"&gt;
										&lt;template&gt;text/xml&lt;/template&gt;
									&lt;/var-def&gt;
								&lt;/if&gt;
								&lt;if condition='${format.toString().equals("txt")}'&gt;
									&lt;var-def name="path"&gt;
										&lt;template&gt;${bp_run_id}/${document_uuid}/${original_document_name}-txt.txt&lt;/template&gt;
									&lt;/var-def&gt;

									&lt;var-def name="type"&gt;
										&lt;template&gt;text/plain&lt;/template&gt;
									&lt;/var-def&gt;
								&lt;/if&gt;
							&lt;/case&gt;

							&lt;var-def name="ocr_document_url"&gt;
								&lt;s3 bucket="${s3_bucket_name}"&gt;
									&lt;s3-put-public path="${path}" content="${result}"
										content-type="${type}" content-disposition="inline" /&gt;
								&lt;/s3&gt;
							&lt;/var-def&gt;

							&lt;script language="groovy"&gt;&lt;![CDATA[
								def ocr_document_name = ocr_document_url.toString().tokenize('/').last().tokenize('.').first()
							
								Map map = new HashMap();
								
								map.put("original_document_url", original_document_url.toString());
								map.put("original_document_name", original_document_name.toString());
								map.put("ocr_document_url", ocr_document_url.toString());
								map.put("ocr_document_name", ocr_document_name);
								map.put("ocr_export_format", format.toString());
								map.put("ocr_document_format", path.toString().substring(path.toString().lastIndexOf(".") + 1, path.toString().length()));

								ocr_result_list.toList().add(map);
							]]&gt;&lt;/script&gt;
						&lt;/if&gt;
					&lt;/case&gt;

				&lt;/body&gt;
			&lt;/loop&gt;

			&lt;script language="groovy"&gt;&lt;![CDATA[
				import com.google.gson.Gson;

				Gson gson = new Gson();
				String result_json = gson.toJson(ocr_result_list.toList());
				sys.defineVariable("ocr_json", result_json);
			]]&gt;&lt;/script&gt;
		&lt;/if&gt;
	&lt;/case&gt;

	&lt;export include-original-data="true"&gt;
		&lt;single-column name="xml_export_format_flag" value="${xml_export_format_flag}" /&gt;
		&lt;single-column name="ocr_failed" value="${ocr_failed}" /&gt;
		&lt;single-column name="ocr_failed_response" value="${ocr_failed_response}" /&gt;
		&lt;single-column name="ocr_json" value="${ocr_json}" /&gt;
        &lt;single-column name="ocr_status_response" value="${statusResponse}"/&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                    <description></description>
                                    <includedConfigs/>
                                    <inclusionCode>894722cf-e512-4694-8e91-dfc912799cf2</inclusionCode>
                                    <jsonParams>{"configXMLModified":"true"}</jsonParams>
                                    <machineWorkSetting>
                                        <category>
                                            <automation>false</automation>
                                            <description></description>
                                            <enabled>true</enabled>
                                            <executingType>MACHINE</executingType>
                                            <name>Other</name>
                                            <private>false</private>
                                            <publicId>dd92f240-144b-4fef-8476-4ec0acbc1105</publicId>
                                        </category>
                                        <contentType>BLANK</contentType>
                                        <description></description>
                                        <enabled>true</enabled>
                                        <name>Miscellaneous Tasks</name>
                                        <publicId>26e6e095-00bb-43fa-8c34-af0b18e71ac9</publicId>
                                        <version>
                                            <componentUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2018-07-09T12:40:36Z</lastModified>
                                            <versionUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</versionUuid>
                                        </version>
                                        <answers/>
                                        <machineWorkSettingType>BASIC</machineWorkSettingType>
                                        <template>
                                            <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                            <name>Blank</name>
                                            <origination>CREATED_MANUALLY</origination>
                                            <status>ACTIVE</status>
                                            <type>BASE_MACHINE</type>
                                            <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                            <version>
                                                <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                                <incrementalVersion>1.0</incrementalVersion>
                                                <lastInChain>true</lastInChain>
                                                <lastModified>2012-12-27T00:00:00Z</lastModified>
                                                <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                            </version>
                                        </template>
                                    </machineWorkSetting>
                                    <machineWorkSettingType>BASIC</machineWorkSettingType>
                                    <name>Response from OCR</name>
                                    <machineConfigOptions/>
                                    <sourceType>MANUAL</sourceType>
                                    <template>
                                        <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                        <name>Blank</name>
                                        <origination>CREATED_MANUALLY</origination>
                                        <status>ACTIVE</status>
                                        <type>BASE_MACHINE</type>
                                        <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                        <version>
                                            <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2012-12-27T00:00:00Z</lastModified>
                                            <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                        </version>
                                    </template>
                                    <uuid>894722cf-e512-4694-8e91-dfc912799cf2</uuid>
                                    <version>
                                        <componentUuid>3727c3e8-e882-4658-9d0e-c71fa9b85bfe</componentUuid>
                                        <incrementalVersion>1.16</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2018-08-13T11:41:07Z</lastModified>
                                        <versionUuid>60762310-44d7-4ca9-8571-338d135d9171</versionUuid>
                                    </version>
                                </machineConfig>
                                <moderation>false</moderation>
                                <origination>CREATED_AUTOMATICALLY</origination>
                                <requiresData>true</requiresData>
                                <status>ACTIVE</status>
                                <streamComplexRunThreshold>1</streamComplexRunThreshold>
                                <streamTimeInterval>Immediately</streamTimeInterval>
                                <streamTimeIntervalValue>0</streamTimeIntervalValue>
                                <streamValueType>Tasks</streamValueType>
                                <title>Response from OCR</title>
                                <type>SINGLE</type>
                                <uuid>4e5dc495-d324-4494-b37e-5d65d17741fd</uuid>
                                <validWorkflow>false</validWorkflow>
                                <version>
                                    <componentUuid>8937f52e-41ba-4941-8588-c5cc81fe025a</componentUuid>
                                    <incrementalVersion>1.12</incrementalVersion>
                                    <lastInChain>true</lastInChain>
                                    <lastModified>2018-08-13T11:41:07Z</lastModified>
                                    <versionUuid>3229041a-3d17-40fc-9f4d-1d1200e4e387</versionUuid>
                                </version>
                                <workSettingBase>false</workSettingBase>
                            </campaign>
                            <deleted>false</deleted>
                            <stepIndex>11</stepIndex>
                            <stepPosition>INTERMEDIATE</stepPosition>
                            <streamed>false</streamed>
                            <uuid>fd273c6a-0149-4efe-9c9a-856afcce755c</uuid>
                        </campaignMap>
                        <campaignMap>
                            <blockSize>1</blockSize>
                            <businessRule>
                                <content>#RuleContext.APPROVE_ALL_RULE</content>
                                <name>Approve All</name>
                                <ruleType>WORKFLOW_RULE</ruleType>
                                <ruleTypeUI>Composite</ruleTypeUI>
                                <uuid>1babae19-0a29-4b51-87b0-c8385a141497</uuid>
                                <workflowRuleMode>SIMPLE</workflowRuleMode>
                            </businessRule>
                            <campaign>
                                <active>false</active>
                                <businessRules/>
                                <campaignMaps/>
                                <campaigns/>
                                <executingType>MACHINE</executingType>
                                <goldBucketBlockSize>0</goldBucketBlockSize>
                                <goldRatio>0</goldRatio>
                                <goldSource>Empty</goldSource>
                                <goldType>Percentage</goldType>
                                <machineConfig>
                                    <answers/>
                                    <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;

  	&lt;required name="original_document_url"/&gt;
	
    &lt;var-def name="document_link"&gt;
     	 &lt;template&gt;${original_document_url}&lt;/template&gt;
    &lt;/var-def&gt;
  
  	&lt;var-def name="name_of_page"&gt;
     	 page_for_manual_tagging
    &lt;/var-def&gt;
  
  	&lt;var-def name="desired_dpi"&gt;
     	 &lt;template&gt;288&lt;/template&gt;
    &lt;/var-def&gt;
  
  	&lt;var-def name="convert_path"&gt;
     	 &lt;var-global name="convert_lib_path"/&gt;
    &lt;/var-def&gt;
  &lt;case&gt;
    &lt;if condition='${is_logging_enabled.toBoolean()}'&gt;      
  		&lt;log&gt;&lt;template&gt;${convert_path}&lt;/template&gt;&lt;/log&gt;
    &lt;/if&gt;
  &lt;/case&gt;
    &lt;var-def name="document_uuid"&gt;
         &lt;script return="uuid"&gt;&lt;![CDATA[String uuid = UUID.randomUUID().toString();]]&gt; &lt;/script&gt;
    &lt;/var-def&gt;   
  
	&lt;var-def name="fileList"&gt;
		&lt;script return="convert(document_link.toString(), convert_path.toString())"&gt;&lt;![CDATA[
			import java.io.BufferedReader;
			import java.io.File;
			import java.io.IOException;
			import java.io.InputStreamReader;
			import java.net.URL;
			import com.itextpdf.text.Image;

			import com.google.common.io.Files;
			import org.apache.commons.io.FileUtils;
			import org.apache.commons.io.FilenameUtils;
			import com.freedomoss.workfusion.utils.gson.GsonUtils;
			import org.webharvest.runtime.variables.ListVariable;
			import org.webharvest.runtime.variables.Variable;

			static Integer counter;
			static File outputFolder;
			static Integer size;
			static ListVariable lv;

			static int getSize(){
				return size;
			}

   			static Variable staticGetVariable(Object i){
				return lv.get((Integer)i);
			}

			static boolean getOS(){
				return ((String)System.getProperties().get("os.name")).contains("Windows");
			}

			boolean isWindows=getOS();

			String dpi = desired_dpi.getWrappedObject().get(0).getWrappedObject().toString();
			String convert = convert_path.getWrappedObject().get(0).getWrappedObject().toString();


			static ListVariable convert(String documentLink, String convertPath) throws IOException, InterruptedException {
				File baseDir = Files.createTempDir();

				File inputFolder = new File(baseDir, "input");

				URL documentUrl = new URL(documentLink);
				String inputFileName = FilenameUtils.getName(documentUrl.getPath());
				if (inputFileName == null || inputFileName.isEmpty()) {
					inputFileName = "input.pdf";
				}

				File inputFile = new File(inputFolder, inputFileName);
				FileUtils.copyURLToFile(documentUrl, inputFile);

				outputFolder = new File(baseDir, "output");
				FileUtils.forceMkdir(outputFolder);

				File result = new File(outputFolder, "output.png");
				File resultTiff = new File(outputFolder, "output.tiff");
				if(is_logging_enabled.toBoolean())
					log.info("convertPath "+ convertPath);
				if (isWindows){
				invoke(new ProcessBuilder(new String[] {
					"magick",
					"convert",
					"-density",dpi,
					"-depth","1",
					"-colorspace","Gray",
					inputFile.getAbsolutePath(),
					// "-resize", "25%",
					result.getAbsolutePath()}
				));
				} else {
				invoke(new ProcessBuilder(new String[] {
					convertPath,
					"-density",dpi,
					"-depth","1",
					"-colorspace","Gray",
					inputFile.getAbsolutePath(),
					// "-resize", "25%",
					result.getAbsolutePath()}
				));
    			}
				List list=new ArrayList();
				counter=0;
				File created=new File(outputFolder, "output-"+counter.toString()+".png");
				while (created.exists()){
					counter++;
					list.add(created);
					created=new File(outputFolder, "output-"+counter.toString()+".png");
				}
				if (counter==0){
					created=new File(outputFolder, "output.png");
					if (created.exists()){
						File updated=new File(outputFolder, "output-0.png");
						created.renameTo(updated);
						counter++;
						list.add(updated);
					}
				}
				size=list.size();
				counter=0;
				lv=new ListVariable(list);
				return lv;
			}

			static void invoke(ProcessBuilder builder) throws IOException, InterruptedException {
				builder.redirectErrorStream(true);

				System.err.println(builder.command());
				Process process = builder.start();

				BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream()));
				String line;
				while ((line = in.readLine()) != null) {
					System.out.println(line);
				}
				in.close();

				int code = process.waitFor();
				if (code != 0) {
					throw new RuntimeException("Failed to invoke process: " + builder.command() + ". Return code: " + code);
				}
			}
		]]&gt;&lt;/script&gt;
	&lt;/var-def&gt;
	
	&lt;var-def name="numberOfPages"&gt;
		&lt;script return="getSize()" /&gt;
	&lt;/var-def&gt;

	&lt;loop item="fileJavaObject" index="i" filter="unique"&gt;
		&lt;list&gt;
			&lt;var name="fileList" /&gt;
		&lt;/list&gt;
		&lt;body&gt;
          	&lt;case&gt;
              &lt;if condition='${is_logging_enabled.toBoolean()}'&gt;
                &lt;log&gt;
                    &lt;template&gt;File: ${fileJavaObject}&lt;/template&gt;
                &lt;/log&gt;
              &lt;/if&gt;
            &lt;/case&gt;
			&lt;var-def name="key"&gt;
				&lt;script return="staticGetVariable(i.toInt()-1)"&gt;&lt;/script&gt;
			&lt;/var-def&gt;
			&lt;var-def name="content-${i}"&gt;
		        &lt;file path="${key}" type="binary"/&gt;
			&lt;/var-def&gt;
			&lt;var-def name="content"&gt;
				&lt;var name="content-${i}" /&gt;
			&lt;/var-def&gt;

			&lt;var-def name="converted_link-${i}"&gt;
        		&lt;s3  bucket="${s3_bucket_name}"&gt;
         			&lt;s3-put-public path="${document_uuid}/${name_of_page}-${i}.png" content="${content}" content-type="image/png" content-disposition="inline"/&gt;
        		&lt;/s3&gt;
			&lt;/var-def&gt;
		&lt;/body&gt;
	&lt;/loop&gt;
	
	&lt;var-def name="jsonFilesUrls"&gt;
		&lt;json&gt;
			&lt;loop item="fileJavaObject" index="i" filter="unique"&gt;
				&lt;list&gt;
					&lt;var name="fileList" /&gt;
				&lt;/list&gt;
				&lt;body&gt;
					&lt;json-put key="fileList-${i}"&gt;
						&lt;var name="converted_link-${i}" /&gt;
					&lt;/json-put&gt;
				&lt;/body&gt;
			&lt;/loop&gt;
		&lt;/json&gt;
	&lt;/var-def&gt;
     
	&lt;export include-original-data="true"&gt;
		&lt;single-column name="json_file_urls_for_manual" value="${jsonFilesUrls}" /&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                    <description></description>
                                    <includedConfigs/>
                                    <inclusionCode>f1b1bdac-578f-4fac-9317-19ef53f5bb1a</inclusionCode>
                                    <jsonParams>{"configXMLModified":"true"}</jsonParams>
                                    <machineWorkSetting>
                                        <category>
                                            <automation>false</automation>
                                            <description></description>
                                            <enabled>true</enabled>
                                            <executingType>MACHINE</executingType>
                                            <name>Other</name>
                                            <private>false</private>
                                            <publicId>dd92f240-144b-4fef-8476-4ec0acbc1105</publicId>
                                        </category>
                                        <contentType>BLANK</contentType>
                                        <description></description>
                                        <enabled>true</enabled>
                                        <name>Miscellaneous Tasks</name>
                                        <publicId>26e6e095-00bb-43fa-8c34-af0b18e71ac9</publicId>
                                        <version>
                                            <componentUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2018-07-09T12:40:36Z</lastModified>
                                            <versionUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</versionUuid>
                                        </version>
                                        <answers/>
                                        <machineWorkSettingType>BASIC</machineWorkSettingType>
                                        <template>
                                            <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                            <name>Blank</name>
                                            <origination>CREATED_MANUALLY</origination>
                                            <status>ACTIVE</status>
                                            <type>BASE_MACHINE</type>
                                            <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                            <version>
                                                <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                                <incrementalVersion>1.0</incrementalVersion>
                                                <lastInChain>true</lastInChain>
                                                <lastModified>2012-12-27T00:00:00Z</lastModified>
                                                <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                            </version>
                                        </template>
                                    </machineWorkSetting>
                                    <machineWorkSettingType>BASIC</machineWorkSettingType>
                                    <name>(Copy)[TOOD] Split PDF into PNG pages for manual task</name>
                                    <machineConfigOptions/>
                                    <sourceType>MANUAL</sourceType>
                                    <template>
                                        <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                        <name>Blank</name>
                                        <origination>CREATED_MANUALLY</origination>
                                        <status>ACTIVE</status>
                                        <type>BASE_MACHINE</type>
                                        <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                        <version>
                                            <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2012-12-27T00:00:00Z</lastModified>
                                            <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                        </version>
                                    </template>
                                    <uuid>f1b1bdac-578f-4fac-9317-19ef53f5bb1a</uuid>
                                    <version>
                                        <componentUuid>b756616b-a0f0-40e6-a9f8-a069c4a796a9</componentUuid>
                                        <incrementalVersion>1.12</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2018-08-13T11:41:07Z</lastModified>
                                        <versionUuid>4859a2d6-28af-4157-9dd4-74722ad14093</versionUuid>
                                    </version>
                                </machineConfig>
                                <moderation>false</moderation>
                                <origination>CREATED_AUTOMATICALLY</origination>
                                <requiresData>true</requiresData>
                                <status>ACTIVE</status>
                                <streamComplexRunThreshold>1</streamComplexRunThreshold>
                                <streamTimeInterval>Immediately</streamTimeInterval>
                                <streamTimeIntervalValue>0</streamTimeIntervalValue>
                                <streamValueType>Tasks</streamValueType>
                                <title>(Copy)[TOOD] Split PDF into PNG pages for manual task</title>
                                <type>SINGLE</type>
                                <uuid>7d77b2c6-4ecb-4dde-acda-5c3a09cd9cbe</uuid>
                                <validWorkflow>false</validWorkflow>
                                <version>
                                    <componentUuid>1297640a-e0d1-40a7-8bd4-2dd10411a3fd</componentUuid>
                                    <incrementalVersion>1.7</incrementalVersion>
                                    <lastInChain>true</lastInChain>
                                    <lastModified>2018-08-13T11:41:07Z</lastModified>
                                    <versionUuid>c750bdca-f447-4908-b6df-899e35273ec1</versionUuid>
                                </version>
                                <workSettingBase>false</workSettingBase>
                            </campaign>
                            <deleted>false</deleted>
                            <stepIndex>12</stepIndex>
                            <stepPosition>INTERMEDIATE</stepPosition>
                            <streamed>false</streamed>
                            <uuid>d6fdd7f9-82fe-43e3-8bcf-b2996d3493f1</uuid>
                        </campaignMap>
                        <campaignMap>
                            <businessRule>
                                <content>package com.freedomoss.requester;

#list any import classes here.
import com.freedomoss.objective.model.CompositeRuleContext;
import com.freedomoss.objective.model.CompositeRuleDataItemContext;
import com.freedomoss.requester.model.AwsHitQuestionItem;
import com.freedomoss.requester.model.AwsHitQuestionAnswerItem;
import org.slf4j.Logger;
import java.util.Map;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.ArrayList;
import com.freedomoss.requester.dto.SubmissionResultDTO;

#declare any global variables here
global CompositeRuleContext source
global Logger log
global Map params



rule "Rule context initialization"
auto-focus true
no-loop
dialect "mvel"
agenda-group "initialization-group"
	when
		$ctx:CompositeRuleContext(initialized == false);
	then
		$ctx.updateWorkingMemory();
		# move to business rules
		$ctx.logExecutedRule(kcontext.getRule().getName());
		kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("calculation").setFocus();
end</content>
                                <name>Business Process: End Rule</name>
                                <ruleType>WORKFLOW_RULE</ruleType>
                                <uuid>4facbe17-96eb-4b67-819c-45ee3f2a8046</uuid>
                                <workflowRuleMode>ADVANCED</workflowRuleMode>
                            </businessRule>
                            <campaign>
                                <active>false</active>
                                <businessRules/>
                                <campaignMaps/>
                                <campaigns/>
                                <executingType>MACHINE</executingType>
                                <goldBucketBlockSize>0</goldBucketBlockSize>
                                <goldRatio>0</goldRatio>
                                <goldSource>Empty</goldSource>
                                <goldType>Percentage</goldType>
                                <machineConfig>
                                    <answers/>
                                    <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;

    &lt;var-def name="exportType"&gt;
        &lt;case&gt;
            &lt;if condition='${sys.isVariableDefined("_sys_export_type")}'&gt;
                &lt;template&gt;${_sys_export_type}&lt;/template&gt;
            &lt;/if&gt;
        &lt;/case&gt;
    &lt;/var-def&gt;

    &lt;var-def name="exportColumns"&gt;
        &lt;case&gt;
            &lt;if condition='${sys.isVariableDefined("_sys_export_columns")}'&gt;
                &lt;template&gt;${_sys_export_columns}&lt;/template&gt;
            &lt;/if&gt;
            &lt;else&gt;&lt;/else&gt;
        &lt;/case&gt;
    &lt;/var-def&gt;

    &lt;var-def name="columnNameCase"&gt;
        &lt;case&gt;
            &lt;if condition='${sys.isVariableDefined("_sys_column_name_case")}'&gt;
                &lt;template&gt;${_sys_column_name_case}&lt;/template&gt;
            &lt;/if&gt;
            &lt;else&gt;keep&lt;/else&gt;
        &lt;/case&gt;
    &lt;/var-def&gt;

    &lt;var-def name="dataOnly"&gt;
        &lt;case&gt;
            &lt;if condition='${sys.isVariableDefined("_sys_data_only")}'&gt;
                &lt;template&gt;${_sys_data_only}&lt;/template&gt;
            &lt;/if&gt;
            &lt;else&gt;true&lt;/else&gt;
        &lt;/case&gt;
    &lt;/var-def&gt;

    &lt;var-def name="datastoreName"&gt;
        &lt;script return="item.getWrappedObject().getRun().getDatastoreName()" /&gt;
    &lt;/var-def&gt;
    &lt;case&gt;
        &lt;if condition="${!datastoreName.isEmpty()}"&gt;
            &lt;insert-datastore   datastore-name="${datastoreName}" create="true"&gt;
                &lt;script return="hit_submission_data_item.getWrappedObject().getItemValueMap()"/&gt;
            &lt;/insert-datastore&gt;
        &lt;/if&gt;
    &lt;/case&gt;

    &lt;export include-original-data="true"
            export-type="${exportType}"
            export-columns="${exportColumns}"
            column-name-case="${columnNameCase}"
            data-only="${dataOnly}"&gt;
    &lt;/export&gt;
&lt;/config&gt;</content>
                                    <description>Default machine campaign for end step.</description>
                                    <includedConfigs/>
                                    <inclusionCode>9e5000e3-c243-42d3-b5ad-c6ac90dec35e</inclusionCode>
                                    <machineWorkSetting>
                                        <category>
                                            <automation>false</automation>
                                            <description></description>
                                            <enabled>true</enabled>
                                            <executingType>MACHINE</executingType>
                                            <name>Other</name>
                                            <private>false</private>
                                            <publicId>dd92f240-144b-4fef-8476-4ec0acbc1105</publicId>
                                        </category>
                                        <contentType>BLANK</contentType>
                                        <description></description>
                                        <enabled>true</enabled>
                                        <name>Miscellaneous Tasks</name>
                                        <publicId>26e6e095-00bb-43fa-8c34-af0b18e71ac9</publicId>
                                        <version>
                                            <componentUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2018-07-09T12:40:36Z</lastModified>
                                            <versionUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</versionUuid>
                                        </version>
                                        <answers/>
                                        <machineWorkSettingType>BASIC</machineWorkSettingType>
                                        <template>
                                            <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                            <name>Blank</name>
                                            <origination>CREATED_MANUALLY</origination>
                                            <status>ACTIVE</status>
                                            <type>BASE_MACHINE</type>
                                            <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                            <version>
                                                <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                                <incrementalVersion>1.0</incrementalVersion>
                                                <lastInChain>true</lastInChain>
                                                <lastModified>2012-12-27T00:00:00Z</lastModified>
                                                <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                            </version>
                                        </template>
                                    </machineWorkSetting>
                                    <name>Final Results</name>
                                    <machineConfigOptions/>
                                    <sourceType>MANUAL</sourceType>
                                    <template>
                                        <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                        <name>Blank</name>
                                        <origination>CREATED_MANUALLY</origination>
                                        <status>ACTIVE</status>
                                        <type>BASE_MACHINE</type>
                                        <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                        <version>
                                            <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2012-12-27T00:00:00Z</lastModified>
                                            <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                        </version>
                                    </template>
                                    <uuid>9e5000e3-c243-42d3-b5ad-c6ac90dec35e</uuid>
                                    <version>
                                        <componentUuid>9e5000e3-c243-42d3-b5ad-c6ac90dec35e</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2018-07-09T12:40:44Z</lastModified>
                                        <versionUuid>537dde32-8375-11e8-bbc9-0ae8ba3240ae</versionUuid>
                                    </version>
                                </machineConfig>
                                <moderation>false</moderation>
                                <origination>CREATED_AUTOMATICALLY</origination>
                                <requiresData>true</requiresData>
                                <status>ACTIVE</status>
                                <streamComplexRunThreshold>100</streamComplexRunThreshold>
                                <streamTimeInterval>Immediately</streamTimeInterval>
                                <streamTimeIntervalValue>0</streamTimeIntervalValue>
                                <streamValueType>Percents</streamValueType>
                                <title>Final Results</title>
                                <type>SINGLE</type>
                                <uuid>af4c8905-26dd-4120-b208-39ad3530ffc6</uuid>
                                <validWorkflow>false</validWorkflow>
                                <version>
                                    <componentUuid>52d09332-8375-11e8-bbc9-0ae8ba3240ae</componentUuid>
                                    <incrementalVersion>1.0</incrementalVersion>
                                    <lastInChain>true</lastInChain>
                                    <lastModified>2018-07-09T12:40:44Z</lastModified>
                                    <versionUuid>537e0b69-8375-11e8-bbc9-0ae8ba3240ae</versionUuid>
                                </version>
                                <workSettingBase>false</workSettingBase>
                            </campaign>
                            <deleted>false</deleted>
                            <stepIndex>13</stepIndex>
                            <stepPosition>END</stepPosition>
                            <streamed>false</streamed>
                            <uuid>a34680ab-dcc9-4d0b-827e-9b542264318b</uuid>
                        </campaignMap>
                    </campaignMaps>
                    <campaigns/>
                    <compositeCampaignVersion>NEW_WORKFLOW</compositeCampaignVersion>
                    <compositeStructureXml>&lt;mxGraphModel&gt;&lt;root&gt;&lt;mxCell id="0"/&gt;&lt;mxCell id="1" parent="0"/&gt;&lt;Link id="382" name="" type="link"&gt;&lt;mxCell edge="1" parent="1" source="424" style="link" target="396"&gt;&lt;mxGeometry as="geometry" relative="1" x="0.5" y="10.0"&gt;&lt;mxPoint as="sourcePoint" x="542.0" y="785.5266905667497"/&gt;&lt;mxPoint as="targetPoint" x="955.0" y="96.0"/&gt;&lt;Array as="points"/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;MachineTask campaignMapUUID="dcca0818-4b7e-4332-a107-c2d73a867989" id="396" name="Input data processing" taskUUID="9049c4bb-9c00-4311-ad63-da424d10c7a2" type="machine_task"&gt;&lt;mxCell parent="1" style="machine_task" vertex="1"&gt;&lt;mxGeometry as="geometry" height="60.0" width="160.0" x="840.0" y="756.0"/&gt;&lt;/mxCell&gt;&lt;/MachineTask&gt;&lt;Link id="395" name="" outcome="ApproveAll" outcomeId="ApproveAll" ruleUUID="ddf31643-1e83-4773-8362-3999065c6fed" type="link"&gt;&lt;mxCell edge="1" parent="1" source="396" style="link" target="407"&gt;&lt;mxGeometry as="geometry" relative="1" x="0.5" y="10.0"&gt;&lt;mxPoint as="sourcePoint" x="1010.0" y="107.0"/&gt;&lt;Array as="points"/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;MachineTask campaignMapUUID="4e05e310-1dc7-47cd-9624-aaf48b4f7646" id="407" name="Look for OCR cache" taskUUID="156f7ef5-ad40-4af6-b692-6745c6a329c3" type="machine_task"&gt;&lt;mxCell parent="1" style="machine_task" vertex="1"&gt;&lt;mxGeometry as="geometry" height="60.0" width="160.0" x="1100.1166687011719" y="756.2333374023438"/&gt;&lt;/mxCell&gt;&lt;/MachineTask&gt;&lt;Link id="410" name="" type="link"&gt;&lt;mxCell edge="1" parent="1" source="407" style="link" target="409"&gt;&lt;mxGeometry as="geometry" relative="1" x="0.5" y="10.0"/&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;Rule id="409" name="Cache hit?" ruleUUID="076cc447-29ad-4292-93ce-48413867404a" type="rule"&gt;&lt;mxCell parent="1" style="rule" vertex="1"&gt;&lt;mxGeometry as="geometry" height="32.0" width="32.0" x="1378.0" y="770.0"/&gt;&lt;/mxCell&gt;&lt;/Rule&gt;&lt;Link conditional="true" id="411" label="Yes" name="" outcomeId="Yes" ruleUUID="076cc447-29ad-4292-93ce-48413867404a" type="link"&gt;&lt;mxCell edge="1" parent="1" source="409" style="link" target="397"&gt;&lt;mxGeometry as="geometry" x="690.0" y="60.0"&gt;&lt;mxPoint as="targetPoint" x="1440.0" y="81.0"/&gt;&lt;Array as="points"&gt;&lt;mxPoint x="1871.0" y="791.0"/&gt;&lt;/Array&gt;&lt;mxPoint as="offset" x="-38.0" y="-183.0"/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;Link conditional="false" id="412" label="No" name="" outcomeId="No" ruleUUID="076cc447-29ad-4292-93ce-48413867404a" type="link"&gt;&lt;mxCell edge="1" parent="1" source="409" style="link" target="414"&gt;&lt;mxGeometry as="geometry" x="690.0" y="60.0"&gt;&lt;mxPoint as="targetPoint" x="1253.0" y="180.0"/&gt;&lt;Array as="points"&gt;&lt;mxPoint x="1394.0" y="891.0"/&gt;&lt;/Array&gt;&lt;mxPoint as="offset" x="59.0" y="4.0"/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;MachineTask campaignMapUUID="6e7159c5-2987-4ce8-a3d7-8fed7007ba51" id="414" label="" name="GoTo OCR" streamed="false" taskUUID="a7b9d471-e1f7-4101-b1ac-cff093698bc9" type="machine_task"&gt;&lt;mxCell parent="1" style="machine_task" vertex="1"&gt;&lt;mxGeometry as="geometry" height="41.0" width="126.0" x="1117.0" y="870.0"/&gt;&lt;/mxCell&gt;&lt;/MachineTask&gt;&lt;Link id="413" name="" type="link"&gt;&lt;mxCell edge="1" parent="1" source="414" style="link" target="385"&gt;&lt;mxGeometry as="geometry" relative="1" x="0.5" y="10.0"&gt;&lt;mxPoint as="sourcePoint" x="1127.0" y="180.0"/&gt;&lt;Array as="points"/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;Rule id="385" name="OCR Type" ruleUUID="0998f1c4-9ccd-45b7-b0f3-d28f107238ca" type="rule"&gt;&lt;mxCell parent="1" style="rule" vertex="1"&gt;&lt;mxGeometry as="geometry" height="32.0" width="32.0" x="954.0" y="875.0"/&gt;&lt;/mxCell&gt;&lt;/Rule&gt;&lt;Link conditional="true" id="387" label="Standard" name="" outcomeId="Standard" ruleUUID="0998f1c4-9ccd-45b7-b0f3-d28f107238ca" type="link"&gt;&lt;mxCell edge="1" parent="1" source="385" style="link" target="386"&gt;&lt;mxGeometry as="geometry" x="690.0" y="60.0"&gt;&lt;mxPoint as="targetPoint" x="1084.0" y="280.0"/&gt;&lt;Array as="points"&gt;&lt;mxPoint x="971.0" y="950.0"/&gt;&lt;mxPoint x="1150.0" y="950.0"/&gt;&lt;/Array&gt;&lt;mxPoint as="offset" x="-30.0" y="-3.0"/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;Link conditional="true" id="415" label="TOOD" name="" outcomeId="TOOD" ruleUUID="0998f1c4-9ccd-45b7-b0f3-d28f107238ca" type="link"&gt;&lt;mxCell edge="1" parent="1" source="385" style="link" target="389"&gt;&lt;mxGeometry as="geometry" x="690.0" y="60.0"&gt;&lt;mxPoint as="targetPoint" x="1114.0" y="165.0"/&gt;&lt;Array as="points"&gt;&lt;mxPoint x="820.0" y="890.0"/&gt;&lt;mxPoint x="820.0" y="890.0"/&gt;&lt;/Array&gt;&lt;mxPoint as="offset" y="22.0"/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;MachineTask campaignMapUUID="235f01ab-5b86-459e-86a9-d1c2ecb8a756" id="389" name="[TOOD] Split document into PNG pages" taskUUID="5614de5a-60f8-4c14-b553-0c2c73366adf" type="machine_task"&gt;&lt;mxCell parent="1" style="machine_task" vertex="1"&gt;&lt;mxGeometry as="geometry" height="60.0" width="160.0" x="580.0" y="861.0"/&gt;&lt;/mxCell&gt;&lt;/MachineTask&gt;&lt;Link id="383" name="" outcome="ApproveAll" outcomeId="ApproveAll" ruleUUID="cf499580-9ef4-418d-a5ee-57a99c4b4af2" type="link"&gt;&lt;mxCell edge="1" parent="1" source="389" style="link" target="390"&gt;&lt;mxGeometry as="geometry" relative="1" x="0.5" y="10.0"&gt;&lt;mxPoint as="sourcePoint" x="830.0" y="280.0"/&gt;&lt;mxPoint as="targetPoint" x="830.0" y="310.0"/&gt;&lt;Array as="points"/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;MachineTask campaignMapUUID="f615b752-4574-49d1-855f-66708b8eb892" id="390" name="[TOOD] OCR" taskUUID="3dab49e1-4c73-4132-9193-983b4951f4d5" type="machine_task"&gt;&lt;mxCell parent="1" style="machine_task" vertex="1"&gt;&lt;mxGeometry as="geometry" height="60.0" width="160.0" x="580.0" y="1070.0"/&gt;&lt;/mxCell&gt;&lt;/MachineTask&gt;&lt;Link id="391" name="" outcome="ApproveAll" outcomeId="ApproveAll" ruleUUID="3f15e389-c277-4a2a-a318-9c9e5d0f17e7" type="link"&gt;&lt;mxCell edge="1" parent="1" source="390" style="link" target="392"&gt;&lt;mxGeometry as="geometry" relative="1" x="0.5" y="10.0"&gt;&lt;mxPoint as="sourcePoint" x="830.0" y="370.0"/&gt;&lt;mxPoint as="targetPoint" x="830.0" y="360.0"/&gt;&lt;Array as="points"&gt;&lt;mxPoint x="660.0" y="1170.0"/&gt;&lt;mxPoint x="871.0" y="1170.0"/&gt;&lt;/Array&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;MachineTask campaignMapUUID="fe8273b9-095b-4968-86d8-f47754d16193" id="386" name="[Standard] OCR" taskUUID="ed154b8a-fb08-4f4a-a605-597c0269ab5e" type="machine_task"&gt;&lt;mxCell parent="1" style="machine_task" vertex="1"&gt;&lt;mxGeometry as="geometry" height="60.0" width="160.0" x="1092.1166687011719" y="1069.5333404541016"/&gt;&lt;/mxCell&gt;&lt;/MachineTask&gt;&lt;Link id="393" name="" outcome="ApproveAll" outcomeId="ApproveAll" ruleUUID="4f3818e4-596a-4572-8f6e-e2f95971d5a7" type="link"&gt;&lt;mxCell edge="1" parent="1" source="386" style="link" target="392"&gt;&lt;mxGeometry as="geometry" relative="1" x="0.5" y="10.0"&gt;&lt;Array as="points"&gt;&lt;mxPoint x="1173.0" y="1170.0"/&gt;&lt;mxPoint x="990.0" y="1170.0"/&gt;&lt;/Array&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;MachineTask campaignMapUUID="fd273c6a-0149-4efe-9c9a-856afcce755c" id="392" name="Response from OCR" taskUUID="4e5dc495-d324-4494-b37e-5d65d17741fd" type="machine_task"&gt;&lt;mxCell parent="1" style="machine_task" vertex="1"&gt;&lt;mxGeometry as="geometry" height="60.0" width="160.0" x="840.0" y="1190.0"/&gt;&lt;/mxCell&gt;&lt;/MachineTask&gt;&lt;Link id="394" name="" type="link"&gt;&lt;mxCell edge="1" parent="1" source="392" style="link" target="384"&gt;&lt;mxGeometry as="geometry" relative="1" x="0.5" y="10.0"&gt;&lt;Array as="points"&gt;&lt;mxPoint x="920.0" y="1310.0"/&gt;&lt;mxPoint x="660.0" y="1310.0"/&gt;&lt;/Array&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;Rule id="384" name="OCR Router" ruleUUID="fc3d0e66-5faa-4b7e-9140-c1cd3809bff1" type="rule"&gt;&lt;mxCell parent="1" style="rule" vertex="1"&gt;&lt;mxGeometry as="geometry" height="32.0" width="32.0" x="644.0" y="1330.0"/&gt;&lt;/mxCell&gt;&lt;/Rule&gt;&lt;Link conditional="true" id="398" label="OCR Failed" name="" outcomeId="OCR Failed" ruleUUID="fc3d0e66-5faa-4b7e-9140-c1cd3809bff1" type="link"&gt;&lt;mxCell edge="1" parent="1" source="384" style="link" target="425"&gt;&lt;mxGeometry as="geometry" x="690.0" y="60.0"&gt;&lt;mxPoint as="targetPoint" x="1330.5090931674895" y="1262.0"/&gt;&lt;Array as="points"/&gt;&lt;mxPoint as="offset" x="-210.0" y="-6.0"/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;Link conditional="true" id="399" label="TOOD" name="" outcomeId="TOOD" ruleUUID="fc3d0e66-5faa-4b7e-9140-c1cd3809bff1" type="link"&gt;&lt;mxCell edge="1" parent="1" source="384" style="link" target="418"&gt;&lt;mxGeometry as="geometry" x="690.0" y="60.0"&gt;&lt;mxPoint as="targetPoint" x="930.0" y="520.0"/&gt;&lt;Array as="points"&gt;&lt;mxPoint x="660.0" y="1429.0"/&gt;&lt;/Array&gt;&lt;mxPoint as="offset" y="24.0"/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;Link conditional="true" id="400" label="Standard" name="" outcomeId="Standard" ruleUUID="fc3d0e66-5faa-4b7e-9140-c1cd3809bff1" type="link"&gt;&lt;mxCell edge="1" parent="1" source="384" style="link" target="388"&gt;&lt;mxGeometry as="geometry"&gt;&lt;mxPoint as="targetPoint" x="1010.0" y="730.0"/&gt;&lt;Array as="points"&gt;&lt;mxPoint x="660.0" y="1559.0"/&gt;&lt;/Array&gt;&lt;mxPoint as="offset" x="32.0" y="139.0"/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;Link conditional="true" id="401" label="Standard (without xml export format)" name="" outcomeId="Standard (without xml export format)" ruleUUID="fc3d0e66-5faa-4b7e-9140-c1cd3809bff1" type="link"&gt;&lt;mxCell edge="1" parent="1" source="384" style="link" target="408"&gt;&lt;mxGeometry as="geometry"&gt;&lt;mxPoint as="targetPoint" x="770.0" y="720.0"/&gt;&lt;Array as="points"&gt;&lt;mxPoint x="660.0" y="1621.0"/&gt;&lt;mxPoint x="1701.0" y="1621.0"/&gt;&lt;/Array&gt;&lt;mxPoint as="offset" x="-40.0" y="149.0"/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;MachineTask campaignMapUUID="d6fdd7f9-82fe-43e3-8bcf-b2996d3493f1" id="418" name="(Copy)[TOOD] Split PDF into PNG pages for manual task" taskUUID="7d77b2c6-4ecb-4dde-acda-5c3a09cd9cbe" type="machine_task"&gt;&lt;mxCell parent="1" style="machine_task" vertex="1"&gt;&lt;mxGeometry as="geometry" height="60.0" width="204.0" x="968.0" y="1400.0"/&gt;&lt;/mxCell&gt;&lt;/MachineTask&gt;&lt;Link id="423" name="" outcome="ApproveAll" outcomeId="ApproveAll" ruleUUID="1babae19-0a29-4b51-87b0-c8385a141497" type="link"&gt;&lt;mxCell edge="1" parent="1" source="418" style="link" target="388"&gt;&lt;mxGeometry as="geometry" relative="1" x="0.5" y="10.0"/&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;MachineTask campaignMapUUID="dab9eae7-ba34-40d1-85c6-20eb8bf13d50" id="388" name="XSLT Cut off Raw OCR XML tags" taskUUID="40a908be-cbe2-41ea-800c-0922708b1e93" type="machine_task"&gt;&lt;mxCell parent="1" style="machine_task" vertex="1"&gt;&lt;mxGeometry as="geometry" height="60.0" width="160.0" x="1234.0" y="1400.0"/&gt;&lt;/mxCell&gt;&lt;/MachineTask&gt;&lt;Link id="405" name="" type="link"&gt;&lt;mxCell edge="1" parent="1" source="388" style="link" target="402"&gt;&lt;mxGeometry as="geometry" relative="1" x="0.5" y="10.0"&gt;&lt;Array as="points"&gt;&lt;mxPoint x="1510.0" y="1430.0"/&gt;&lt;mxPoint x="1510.0" y="1430.0"/&gt;&lt;/Array&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;MachineTask campaignMapUUID="b4d9b79a-59ba-4201-bc74-d8bd32dc1291" id="408" name="Cache OCR results" taskUUID="410fb53c-97e3-4e61-a81e-e794c217a47b" type="machine_task"&gt;&lt;mxCell parent="1" style="machine_task" vertex="1"&gt;&lt;mxGeometry as="geometry" height="60.0" width="160.0" x="1620.1166687011719" y="1590.2333374023438"/&gt;&lt;/mxCell&gt;&lt;/MachineTask&gt;&lt;Link conditional="true" id="404" label="Standard" name="" outcomeId="Standard" ruleUUID="510e3e05-5ca4-4b81-85a2-1a350218d1ef" type="link"&gt;&lt;mxCell edge="1" parent="1" source="402" style="link" target="408"&gt;&lt;mxGeometry as="geometry"&gt;&lt;mxPoint as="targetPoint" x="1230.0" y="650.0"/&gt;&lt;Array as="points"&gt;&lt;mxPoint x="1539.0" y="1521.0"/&gt;&lt;mxPoint x="1639.0" y="1521.0"/&gt;&lt;/Array&gt;&lt;mxPoint as="offset" x="-29.0" y="24.0"/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;Link id="406" name="" outcome="ApproveAll" outcomeId="ApproveAll" ruleUUID="3ac307de-0068-44de-9e9d-da26ba9d94e7" type="link"&gt;&lt;mxCell edge="1" parent="1" source="380" style="link" target="408"&gt;&lt;mxGeometry as="geometry" relative="1" x="0.5" y="10.0"&gt;&lt;Array as="points"/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;Link id="416" name="" outcome="ApproveAll" outcomeId="ApproveAll" ruleUUID="5c9059b1-dbb1-4659-8270-3d17f82cd99c" type="link"&gt;&lt;mxCell edge="1" parent="1" source="408" style="link" target="397"&gt;&lt;mxGeometry as="geometry" relative="1" x="0.5" y="10.0"/&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;Link id="417" name="" outcome="ApproveAll" outcomeId="ApproveAll" ruleUUID="58b9dc28-d7b3-4122-9bfe-d02dfcd24c4c" type="link"&gt;&lt;mxCell edge="1" parent="1" source="397" style="link" target="425"&gt;&lt;mxGeometry as="geometry" relative="1" x="0.5" y="10.0"&gt;&lt;mxPoint as="targetPoint" x="1346.0" y="1245.1760275322104"/&gt;&lt;Array as="points"/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;MachineTask campaignMapUUID="f2631fb2-8f2c-4665-9574-1d2b5451bdc3" id="380" name="[TOOD] XSLT XML Enrichment with WORD and DIV tags" taskUUID="183f85b1-2f07-4a01-baa7-7eef101da698" type="machine_task"&gt;&lt;mxCell parent="1" style="machine_task" vertex="1"&gt;&lt;mxGeometry as="geometry" height="60.0" width="160.0" x="1620.0" y="1316.0"/&gt;&lt;/mxCell&gt;&lt;/MachineTask&gt;&lt;Link conditional="true" id="403" label="TOOD" name="" outcomeId="TOOD" ruleUUID="510e3e05-5ca4-4b81-85a2-1a350218d1ef" type="link"&gt;&lt;mxCell edge="1" parent="1" source="402" style="link" target="380"&gt;&lt;mxGeometry as="geometry"&gt;&lt;mxPoint as="targetPoint" x="1300.0" y="603.0"/&gt;&lt;Array as="points"&gt;&lt;mxPoint x="1539.0" y="1350.0"/&gt;&lt;/Array&gt;&lt;mxPoint as="offset" x="-50.0" y="6.0"/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;Rule id="402" name="OCR Type" ruleUUID="510e3e05-5ca4-4b81-85a2-1a350218d1ef" type="rule"&gt;&lt;mxCell parent="1" style="rule" vertex="1"&gt;&lt;mxGeometry as="geometry" height="32.0" width="32.0" x="1520.0" y="1414.0"/&gt;&lt;/mxCell&gt;&lt;/Rule&gt;&lt;MachineTask campaignMapUUID="d66706f9-72c3-4128-9b20-6a19caca8b69" id="397" name="Result JSON processing" taskUUID="5967587c-06c0-4fc3-9cfd-cb279159e617" type="machine_task"&gt;&lt;mxCell parent="1" style="machine_task" vertex="1"&gt;&lt;mxGeometry as="geometry" height="60.0" width="160.0" x="1800.1166687011719" y="1215.5333404541016"/&gt;&lt;/mxCell&gt;&lt;/MachineTask&gt;&lt;Start id="424" name="Start" type="start"&gt;&lt;mxCell parent="1" style="start" vertex="1"&gt;&lt;mxGeometry as="geometry" height="32.0" width="32.0" x="480.0" y="770.0"/&gt;&lt;/mxCell&gt;&lt;/Start&gt;&lt;End campaignMapUUID="a34680ab-dcc9-4d0b-827e-9b542264318b" id="425" name="End" type="end"&gt;&lt;mxCell parent="1" style="end" vertex="1"&gt;&lt;mxGeometry as="geometry" height="32.0" width="32.0" x="1310.0" y="1230.0"/&gt;&lt;/mxCell&gt;&lt;/End&gt;&lt;/root&gt;&lt;/mxGraphModel&gt;</compositeStructureXml>
                    <description>Business Process description</description>
                    <executingType>COMPOSITE</executingType>
                    <goldBucketBlockSize>0</goldBucketBlockSize>
                    <goldRatio>0</goldRatio>
                    <goldSource>Empty</goldSource>
                    <goldType>Percentage</goldType>
                    <moderation>false</moderation>
                    <origination>CREATED_AUTOMATICALLY</origination>
                    <requiresData>true</requiresData>
                    <status>ACTIVE</status>
                    <streamComplexRunThreshold>1</streamComplexRunThreshold>
                    <streamTimeInterval>Immediately</streamTimeInterval>
                    <streamTimeIntervalValue>0</streamTimeIntervalValue>
                    <streamValueType>Tasks</streamValueType>
                    <title>Workfusion_OCR_v2.0</title>
                    <type>COMPOSITE</type>
                    <uuid>a05e72af-72a2-4297-8075-6e710cb40e5c</uuid>
                    <validWorkflow>true</validWorkflow>
                    <version>
                        <componentUuid>a3b8331e-b2cf-4b1a-aa6e-d084bb125bff</componentUuid>
                        <incrementalVersion>1.2</incrementalVersion>
                        <lastInChain>true</lastInChain>
                        <lastModified>2018-08-13T12:38:25Z</lastModified>
                        <versionUuid>d60f6fb4-8764-4fba-9819-01a0b0adcd32</versionUuid>
                    </version>
                    <workSettingBase>true</workSettingBase>
                </campaign>
            </compositeWorkSetting>
            <hashCode>1949752862</hashCode>
        </objectContainer>
    </objects>
</objectListWrapper>
